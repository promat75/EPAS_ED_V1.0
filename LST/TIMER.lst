C51 COMPILER V9.53.0.0   TIMER                                                             01/28/2020 11:28:55 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\HEX\TIMER.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Platform\hal\TIMER.c LARGE OPTIMIZE(9,SIZE) BROWSE INCDIR(.\Platform\Inc
                    -lude\;.\Platform\hal\;.\Sample\Include\;.\Sample\Utility\;.\Sample\EVB) DEFINE(__DEBUG,__INTERNAL_MODE) PRINT(.\LST\TIME
                    -R.lst) TABS(2) OBJECT(.\HEX\TIMER.obj)

line level    source

   1          
   2          /*******************************************************************************
   3            - Chip    : MG2470B
   4            - Vendor    : RadioPulse Inc, 2012.
   5            - Date    : 2012-04-25
   6            - Version   : V2.0
   7          
   8            [2012-04-25] V2.0
   9            - Initial Version for MG2470B(ChipID=0x71)
  10          *******************************************************************************/
  11          
  12          #include "INCLUDE_MG2470.h"
  13          #include "timer.h"
  14          
  15          #ifdef __MG2470_TIMER0_INCLUDE__
  16          
  17          ///////////////////////////////////////////////////////////////////////////////////////////////
  18          /// 
  19          ///   Global variable for reload value of TIMER0's TL
  20          /// 
  21          ///////////////////////////////////////////////////////////////////////////////////////////////
  22          UINT8 gu8Timer0ReloadTL0;
  23          
  24          ///////////////////////////////////////////////////////////////////////////////////////////////
  25          /// 
  26          ///   Global variable for reload value of TIMER0's TH
  27          /// 
  28          ///////////////////////////////////////////////////////////////////////////////////////////////
  29          UINT8 gu8Timer0ReloadTH0;
  30          
  31          ///////////////////////////////////////////////////////////////////////////////////////////////
  32          /// 
  33          ///   Sets clock for TIMER0. Default is Off.
  34          ///
  35          /// @param  u8On  : 0=Off, 1=On
  36          /// @return void
  37          /// 
  38          ///////////////////////////////////////////////////////////////////////////////////////////////
  39          void HAL_Timer0ClockOn(UINT8 u8On)    // Default On
  40          {
  41   1        if(u8On)
  42   1        {
  43   2          TIMER0_CLK_ON;
  44   2        }
  45   1        else
  46   1        {
  47   2          TIMER0_CLK_OFF;
  48   2        }
  49   1      }
  50          
  51          ///////////////////////////////////////////////////////////////////////////////////////////////
  52          /// 
  53          ///   Sets TIMER0 interrupt.
C51 COMPILER V9.53.0.0   TIMER                                                             01/28/2020 11:28:55 PAGE 2   

  54          ///
  55          /// @param  u8IntEna    : 0=Disable, 1=Enable.
  56          /// @param  u8Priority    : Priority of interrupt. 0=Low, 1=High.
  57          /// @param  u8Run   : 0=Not run, 1=Run.
  58          /// @param  u8Tick_ms : Number of ticks for the interrupt in ms. 1 ~ 98.
  59          ///             \n Interrupt period = "u8Tick_ms" x 1ms.
  60          /// @return UINT8. Status.
  61          /// @note "u8Tick_ms" indicates 1ms when MCU frequency is 8MHz. The period for another frequency is,
  62          ///       \n Interrupt period = "u8Tick_ms" x 1ms x (8MHz / MCU frequency).
  63          /// 
  64          ///////////////////////////////////////////////////////////////////////////////////////////////
  65          UINT8 HAL_Timer0IntSet(UINT8 u8IntEna, UINT8 u8Priority, UINT8 u8Run, UINT8 u8Tick_ms)
  66          {
  67   1        UINT32  u32Reload32;
  68   1        UINT8 u8EA;
  69   1      
  70   1        if(TIMER0_CLK_STATE == 0)
  71   1        {
  72   2          assert_error(TIMER_CODE | RETURN_TIMER0_CLOCK_OFF);
  73   2          return RETURN_TIMER0_CLOCK_OFF;
  74   2        }
  75   1        if(u8Tick_ms > 98)
  76   1        {
  77   2          assert_error(TIMER_CODE | RETURN_TIMER0_INVALID_PARAMETER);
  78   2          return RETURN_TIMER0_INVALID_PARAMETER;
  79   2        }
  80   1      
  81   1        u8EA = EA;
  82   1        EA = 0;
  83   1      
  84   1        u32Reload32 = 2000;
  85   1        u32Reload32 = u32Reload32 * u8Tick_ms;
  86   1        u32Reload32 = (u32Reload32 / 3) & 0x0000FFFF;
  87   1        u32Reload32 = 0x0000FFFF - u32Reload32 + 1;
  88   1      
  89   1        gu8Timer0ReloadTL0 = u32Reload32;
  90   1        gu8Timer0ReloadTH0 = u32Reload32 >> 8;
  91   1      
  92   1        TL0 = gu8Timer0ReloadTL0;
  93   1        TH0 = gu8Timer0ReloadTH0;
  94   1      
  95   1        TMOD &= 0xF0;
  96   1        TMOD |= 0x01;
  97   1        
  98   1        PT0 = u8Priority;
  99   1        TR0 = u8Run;
 100   1        ET0 = u8IntEna;
 101   1      
 102   1        EA = u8EA;
 103   1      
 104   1        return RETURN_TIMER_SUCCESS;
 105   1      }
 106          
 107          ///////////////////////////////////////////////////////////////////////////////////////////////
 108          /// 
 109          ///   Sets TIMER0 interrupt for short period.
 110          ///
 111          /// @param  u8IntEna    : 0=Disable, 1=Enable.
 112          /// @param  u8Priority    : Priority of interrupt. 0=Low, 1=High.
 113          /// @param  u8Run   : 0=Not run, 1=Run.
 114          /// @param  u16Tick_1500ns : Number of ticks for the interrupt in 1500ns.
 115          ///             \n Interrupt period = "u16Tick_1500ns" x 1500ns.
C51 COMPILER V9.53.0.0   TIMER                                                             01/28/2020 11:28:55 PAGE 3   

 116          /// @return UINT8. Status.
 117          /// @note If too short period is set, The chip seems not to work because almost operation time is 
 118          ///         used for processing TIMER0_ISR().
 119          /// @note "u16Tick_1500ns" indicates 1.5us when MCU frequency is 8MHz. The period for another frequencies 
             -is,
 120          ///       \n Interrupt period = "u16Tick_1500ns" x 1.5us x (8MHz / MCU frequency).
 121          /// 
 122          ///////////////////////////////////////////////////////////////////////////////////////////////
 123          UINT8 HAL_Timer0IntSet_ShortPeriod(UINT8 u8IntEna, UINT8 u8Priority, UINT8 u8Run, UINT16 u16Tick_1500ns)
 124          {
 125   1        UINT8 u8EA;
 126   1        UINT16  u16Reload;
 127   1      
 128   1        if(TIMER0_CLK_STATE == 0)
 129   1        {
 130   2          assert_error(TIMER_CODE | RETURN_TIMER0_CLOCK_OFF);
 131   2          return RETURN_TIMER0_CLOCK_OFF;
 132   2        }
 133   1      
 134   1        u8EA = EA;
 135   1        EA = 0;
 136   1      
 137   1        u16Reload = 0xFFFF - u16Tick_1500ns + 1;
 138   1      
 139   1        gu8Timer0ReloadTL0 = u16Reload;
 140   1        gu8Timer0ReloadTH0 = u16Reload >> 8;
 141   1      
 142   1        TL0 = gu8Timer0ReloadTL0;
 143   1        TH0 = gu8Timer0ReloadTH0;
 144   1      
 145   1        TMOD &= 0xF0;
 146   1        TMOD |= 0x01;
 147   1        
 148   1        PT0 = u8Priority;
 149   1        TR0 = u8Run;
 150   1        ET0 = u8IntEna;
 151   1      
 152   1        EA = u8EA;
 153   1      
 154   1        return RETURN_TIMER_SUCCESS;
 155   1      }
 156          
 157          #endif // #ifdef __MG2470_TIMER0_INCLUDE__
 158          
 159          
 160          
 161          
 162          #ifdef __MG2470_TIMER1_INCLUDE__
 163          
 164          ///////////////////////////////////////////////////////////////////////////////////////////////
 165          /// 
 166          ///   Global variable for reload value of TIMER1's TL
 167          /// 
 168          ///////////////////////////////////////////////////////////////////////////////////////////////
 169          UINT8 gu8Timer1ReloadTL1;
 170          
 171          ///////////////////////////////////////////////////////////////////////////////////////////////
 172          /// 
 173          ///   Global variable for reload value of TIMER1's TH
 174          /// 
 175          ///////////////////////////////////////////////////////////////////////////////////////////////
 176          UINT8 gu8Timer1ReloadTH1; 
C51 COMPILER V9.53.0.0   TIMER                                                             01/28/2020 11:28:55 PAGE 4   

 177          
 178          ///////////////////////////////////////////////////////////////////////////////////////////////
 179          /// 
 180          ///   Sets clock for TIMER1. Default is Off.
 181          ///
 182          /// @param  u8On  : 0=Off, 1=On
 183          /// @return void
 184          /// 
 185          ///////////////////////////////////////////////////////////////////////////////////////////////
 186          void HAL_Timer1ClockOn(UINT8 u8On)
 187          {
 188   1        if(u8On)
 189   1        {
 190   2          TIMER1_CLK_ON;
 191   2        }
 192   1        else
 193   1        {
 194   2          TIMER1_CLK_OFF;
 195   2        }
 196   1      }
 197          
 198          ///////////////////////////////////////////////////////////////////////////////////////////////
 199          /// 
 200          ///   Sets TIMER1 interrupt.
 201          ///
 202          /// @param  u8IntEna    : 0=Disable, 1=Enable.
 203          /// @param  u8Priority    : Priority of interrupt. 0=Low, 1=High.
 204          /// @param  u8Run   : 0=Not run, 1=Run.
 205          /// @param  u8Tick_ms : Number of ticks for the interrupt in ms. 1 ~ 98.
 206          ///             \n Interrupt period = "u8Tick_ms" x 1ms.
 207          /// @return UINT8. Status.
 208          /// @note "u8Tick_ms" indicates 1ms when MCU frequency is 8MHz. The period for another frequency is,
 209          ///       \n Interrupt period = "u8Tick_ms" x 1ms x (8MHz / MCU frequency).
 210          /// 
 211          ///////////////////////////////////////////////////////////////////////////////////////////////
 212          UINT8 HAL_Timer1IntSet(UINT8 u8IntEna, UINT8 u8Priority, UINT8 u8Run, UINT8 u8Tick_ms)
 213          {
 214   1        UINT32  u32Reload32;
 215   1        UINT8 u8EA;
 216   1      
 217   1        if(TIMER1_CLK_STATE == 0)
 218   1        {
 219   2          assert_error(TIMER_CODE | RETURN_TIMER1_CLOCK_OFF);
 220   2          return RETURN_TIMER1_CLOCK_OFF;
 221   2        }
 222   1      
 223   1        if(u8Tick_ms > 98)
 224   1        {
 225   2          assert_error(TIMER_CODE | RETURN_TIMER1_INVALID_PARAMETER);
 226   2          return RETURN_TIMER1_INVALID_PARAMETER;
 227   2        }
 228   1      
 229   1        u8EA = EA;
 230   1        EA = 0; 
 231   1        
 232   1        u32Reload32 = 2000;
 233   1        u32Reload32 = u32Reload32 * u8Tick_ms;    
 234   1        u32Reload32 = (u32Reload32 / 3) & 0x0000FFFF;
 235   1        u32Reload32 = 0x0000FFFF - u32Reload32 + 1;
 236   1      
 237   1        gu8Timer1ReloadTL1 = u32Reload32;
 238   1        gu8Timer1ReloadTH1 = u32Reload32 >> 8;
C51 COMPILER V9.53.0.0   TIMER                                                             01/28/2020 11:28:55 PAGE 5   

 239   1      
 240   1        TL1 = gu8Timer1ReloadTL1;
 241   1        TH1 = gu8Timer1ReloadTH1;
 242   1      
 243   1        TMOD &= 0x0F;   // clear bit[7:4]
 244   1        TMOD |= 0x10;   // Mode=1(16 bit timer) 
 245   1      
 246   1        PT1 = u8Priority;
 247   1        TR1 = u8Run;
 248   1        ET1 = u8IntEna;
 249   1      
 250   1        EA = u8EA;
 251   1      
 252   1        return RETURN_TIMER_SUCCESS;
 253   1      }
 254          
 255          ///////////////////////////////////////////////////////////////////////////////////////////////
 256          /// 
 257          ///   Sets TIMER1 interrupt for short period.
 258          ///
 259          /// @param  u8IntEna    : 0=Disable, 1=Enable.
 260          /// @param  u8Priority    : Priority of interrupt. 0=Low, 1=High.
 261          /// @param  u8Run   : 0=Not run, 1=Run.
 262          /// @param  u16Tick_1500ns  : Number of ticks for the interrupt in 1500ns.
 263          ///             \n Interrupt period = "u16Tick_1500ns" x 1500ns.
 264          /// @return UINT8. Status.
 265          /// @note If too short period is set, The chip seems not to work because almost operation time is 
 266          ///         used for processing TIMER1_ISR().
 267          /// @note "u16Tick_1500ns" indicates 1.5us when MCU frequency is 8MHz. The period for another frequencies 
             -is,
 268          ///       \n Interrupt period = "u16Tick_1500ns" x 1.5us x (8MHz / MCU frequency).
 269          /// 
 270          ///////////////////////////////////////////////////////////////////////////////////////////////
 271          UINT8 HAL_Timer1IntSet_ShortPeriod(UINT8 u8IntEna, UINT8 u8Priority, UINT8 u8Run, UINT16 u16Tick_1500ns)
 272          {
 273   1        UINT8 u8EA;
 274   1        UINT16  u16Reload;
 275   1      
 276   1        if(TIMER1_CLK_STATE == 0)
 277   1        {
 278   2          assert_error(TIMER_CODE | RETURN_TIMER1_CLOCK_OFF);
 279   2          return RETURN_TIMER1_CLOCK_OFF;
 280   2        }
 281   1      
 282   1        u8EA = EA;
 283   1        EA = 0; 
 284   1      
 285   1        u16Reload = 0xFFFF - u16Tick_1500ns + 1;
 286   1      
 287   1        gu8Timer1ReloadTL1 = u16Reload;
 288   1        gu8Timer1ReloadTH1 = u16Reload >> 8;
 289   1      
 290   1        TL1 = gu8Timer1ReloadTL1;
 291   1        TH1 = gu8Timer1ReloadTH1;
 292   1        
 293   1        TMOD &= 0x0F;   // clear bit[7:4]
 294   1        TMOD |= 0x10;   // Mode=1(16 bit timer) 
 295   1      
 296   1        PT1 = u8Priority;
 297   1        TR1 = u8Run;
 298   1        ET1 = u8IntEna;
 299   1      
C51 COMPILER V9.53.0.0   TIMER                                                             01/28/2020 11:28:55 PAGE 6   

 300   1        EA = u8EA;
 301   1      
 302   1        return RETURN_TIMER_SUCCESS;
 303   1      }
 304          
 305          #endif // #ifdef __MG2470_TIMER1_INCLUDE__
 306          
 307          
 308          
 309          
 310          
 311          
 312          
 313          
 314          #ifdef __MG2470_TIMER2_INCLUDE__
 315          
 316          ///////////////////////////////////////////////////////////////////////////////////////////////
 317          /// 
 318          ///   Sets clock for TIMER2. Default is Off.
 319          ///
 320          /// @param  u8On  : 0=Off, 1=On
 321          /// @return void
 322          /// 
 323          ///////////////////////////////////////////////////////////////////////////////////////////////
 324          void HAL_Timer2ClockOn(UINT8 u8On)
 325          {
 326   1        if(u8On)
 327   1        {
 328   2          TIMER2_CLK_ON;
 329   2        }
 330   1        else
 331   1        {
 332   2          TIMER2_CLK_OFF;
 333   2        }
 334   1      }
 335          
 336          ///////////////////////////////////////////////////////////////////////////////////////////////
 337          /// 
 338          ///   Sets TIMER2 interrupt.
 339          ///
 340          /// @param  u8IntEna    : 0=Disable, 1=Enable.
 341          /// @param  u8Priority    : Priority of interrupt. 0=Low, 1=High.
 342          /// @param  u8Run   : 0=Not run, 1=Run.
 343          /// @param  u32Tick_us  : Number of ticks for the interrupt in us. 5us ~ 524.272ms.
 344          ///             \n Interrupt period = "u32Tick_us" x 1us.
 345          /// @return UINT8. Status.
 346          /// @note "u32Tick_us" indicates 1us when MCU frequency is 8MHz. The period for another frequency is,
 347          ///       \n Interrupt period = "u32Tick_us" x 1us x (8MHz / MCU frequency).
 348          /// 
 349          ///////////////////////////////////////////////////////////////////////////////////////////////
 350          UINT8 HAL_Timer2IntSet(UINT8 u8IntEna, UINT8 u8Priority, UINT8 u8Run, UINT32 u32Tick_us)
 351          {
 352   1        UINT8 u8EA;
 353   1        UINT16  u16Counter;
 354   1        UINT8 u8Division;
 355   1        UINT8 u8Divider;
 356   1        UINT8 u8PeriodHigh;
 357   1        UINT8 u8PeriodLow;
 358   1      
 359   1        if(TIMER2_CLK_STATE == 0)
 360   1        {
 361   2          assert_error(TIMER_CODE | RETURN_TIMER2_CLOCK_OFF);
C51 COMPILER V9.53.0.0   TIMER                                                             01/28/2020 11:28:55 PAGE 7   

 362   2          return RETURN_TIMER2_CLOCK_OFF;
 363   2        }
 364   1      
 365   1        if( (u32Tick_us < 5) && (u32Tick_us > 524272) )
 366   1        {
 367   2          assert_error(TIMER_CODE | RETURN_TIMER2_INVALID_PARAMETER);
 368   2          return RETURN_TIMER2_INVALID_PARAMETER;
 369   2        }
 370   1      
 371   1        if(u32Tick_us > 262136)   //  Division 64
 372   1        {
 373   2          u8Divider = 64;
 374   2          u8Division = TIMER2_DIVISION_64;
 375   2        }
 376   1        else if(u32Tick_us > 131068)  //  Division 32
 377   1        {
 378   2          u8Divider = 32;
 379   2          u8Division = TIMER2_DIVISION_32;
 380   2        }
 381   1        else if(u32Tick_us > 65534) //  Division 16
 382   1        {
 383   2          u8Divider = 16;
 384   2          u8Division = TIMER2_DIVISION_16;
 385   2        }
 386   1        else              //  Division 8(default)
 387   1        {
 388   2          u8Divider = 8;
 389   2          u8Division = TIMER2_DIVISION_8;
 390   2        }
 391   1      
 392   1        u16Counter = ((float)( (u32Tick_us * 8) / u8Divider ) + 0.5) - 1;
 393   1      
 394   1        u8PeriodHigh = (u16Counter / 256);
 395   1        u8PeriodLow = (float)((float)(u16Counter % 256) + 0.5);
 396   1      
 397   1        u8EA = EA;
 398   1        EA = 0; 
 399   1      
 400   1        T23CON &= ~(BIT3 | BIT2 | BIT1 | BIT0);   // bit[3:0]=4'b0000
 401   1        if(u8IntEna)
 402   1        {
 403   2          TH2 = u8PeriodHigh;
 404   2          TL2 = u8PeriodLow;
 405   2          T2IP = u8Priority;
 406   2          if(u8Run) T23CON |= (u8Division << 1) | BIT0;   // Run & Division
 407   2          else      T23CON &= ~BIT0;          // Not run
 408   2          T2IE = 1;
 409   2        }
 410   1        else
 411   1        {
 412   2          T2IE = 0;
 413   2        }
 414   1      
 415   1        EA = u8EA;
 416   1      
 417   1        return RETURN_TIMER_SUCCESS;
 418   1      }
 419          #endif    // #ifdef __MG2470_TIMER2_INCLUDE__
 420          
 421          
 422          
 423          
C51 COMPILER V9.53.0.0   TIMER                                                             01/28/2020 11:28:55 PAGE 8   

 424          
 425          
 426          #ifdef __MG2470_TIMER3_INCLUDE__
 427          
 428          ///////////////////////////////////////////////////////////////////////////////////////////////
 429          /// 
 430          ///   Sets clock for TIMER3. Default is Off.
 431          ///
 432          /// @param  u8On  : 0=Off, 1=On
 433          /// @return void
 434          /// 
 435          ///////////////////////////////////////////////////////////////////////////////////////////////
 436          void HAL_Timer3ClockOn(UINT8 u8On)
 437          {
 438   1        if(u8On)
 439   1        {
 440   2          TIMER3_CLK_ON;
 441   2        }
 442   1        else
 443   1        {
 444   2          TIMER3_CLK_OFF;
 445   2        }
 446   1      }
 447          
 448          ///////////////////////////////////////////////////////////////////////////////////////////////
 449          /// 
 450          ///   Sets TIMER3 interrupt.
 451          ///
 452          /// @param  u8IntEna    : 0=Disable, 1=Enable.
 453          /// @param  u8Priority    : Priority of interrupt. 0=Low, 1=High.
 454          /// @param  u8Run   : 0=Not run, 1=Run.
 455          /// @param  u32Tick_us  : Number of ticks for the interrupt in us. 5us ~ 524.272ms.
 456          ///             \n Interrupt period = "u32Tick_us" x 1us.
 457          /// @return UINT8. Status.
 458          /// @note "u32Tick_us" indicates 1us when MCU frequency is 8MHz. The period for another frequency is,
 459          ///       \n Interrupt period = "u32Tick_us" x 1us x (8MHz / MCU frequency).
 460          /// 
 461          ///////////////////////////////////////////////////////////////////////////////////////////////
 462          UINT8 HAL_Timer3IntSet(UINT8 u8IntEna, UINT8 u8Priority, UINT8 u8Run, UINT32 u32Tick_us)
 463          {
 464   1        UINT8 u8EA;
 465   1        UINT16  u16Counter;
 466   1        UINT8 u8Division;
 467   1        UINT8 u8Divider;
 468   1        UINT8 u8PeriodHigh;
 469   1        UINT8 u8PeriodLow;
 470   1      
 471   1        if(TIMER3_CLK_STATE == 0)
 472   1        {
 473   2          assert_error(TIMER_CODE | RETURN_TIMER3_CLOCK_OFF);
 474   2          return RETURN_TIMER3_CLOCK_OFF;
 475   2        }
 476   1      
 477   1        if( (u32Tick_us < 5) && (u32Tick_us > 524272) )
 478   1        {
 479   2          assert_error(TIMER_CODE | RETURN_TIMER3_INVALID_PARAMETER);
 480   2          return RETURN_TIMER3_INVALID_PARAMETER;
 481   2        }
 482   1      
 483   1        if(u32Tick_us > 262136)   //  Division 64
 484   1        {
 485   2          u8Divider = 64;
C51 COMPILER V9.53.0.0   TIMER                                                             01/28/2020 11:28:55 PAGE 9   

 486   2          u8Division = TIMER3_DIVISION_64;
 487   2        }
 488   1        else if(u32Tick_us > 131068)  //  Division 32
 489   1        {
 490   2          u8Divider = 32;
 491   2          u8Division = TIMER3_DIVISION_32;
 492   2        }
 493   1        else if(u32Tick_us > 65534) //  Division 16
 494   1        {
 495   2          u8Divider = 16;
 496   2          u8Division = TIMER3_DIVISION_16;
 497   2        }
 498   1        else              //  Division 8(default)
 499   1        {
 500   2          u8Divider = 8;
 501   2          u8Division = TIMER3_DIVISION_8;
 502   2        }
 503   1      
 504   1        u16Counter = ((float)( (u32Tick_us * 8) / u8Divider ) +0.5) - 1;
 505   1      
 506   1        u8PeriodHigh = (u16Counter / 256);
 507   1        u8PeriodLow = (float)((float)(u16Counter % 256) + 0.5);
 508   1      
 509   1        u8EA = EA;
 510   1        EA = 0;
 511   1      
 512   1        T23CON  &= ~(BIT7 | BIT6 | BIT5 | BIT4);  //bit[7:4]=4'b0000.
 513   1        if(u8IntEna)
 514   1        {
 515   2          TH3 = u8PeriodHigh;
 516   2          TL3 = u8PeriodLow;
 517   2          T3IP = u8Priority;
 518   2          if(u8Run) T23CON |= (u8Division << 5) | BIT4;   // Run & Division
 519   2          else      T23CON &= ~BIT4;          // Not run
 520   2          T3IE = 1;
 521   2        }
 522   1        else
 523   1        {
 524   2          T3IE = 0;
 525   2        }
 526   1      
 527   1        EA = u8EA;
 528   1      
 529   1        return RETURN_TIMER_SUCCESS;
 530   1      }
 531          #endif    // #ifdef __MG2470_TIMER3_INCLUDE__
 532          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1106    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4      50
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
