C51 COMPILER V9.53.0.0   POWER                                                             01/28/2020 11:28:54 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE POWER
OBJECT MODULE PLACED IN .\HEX\POWER.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Platform\hal\POWER.c LARGE OPTIMIZE(9,SIZE) BROWSE INCDIR(.\Platform\Inc
                    -lude\;.\Platform\hal\;.\Sample\Include\;.\Sample\Utility\;.\Sample\EVB) DEFINE(__DEBUG,__INTERNAL_MODE) PRINT(.\LST\POWE
                    -R.lst) TABS(2) OBJECT(.\HEX\POWER.obj)

line level    source

   1          
   2          /*******************************************************************************
   3            - Chip    : MG2470B
   4            - Vendor    : RadioPulse Inc, 2012.
   5            - Date    : 2014-08-28
   6            - Version   : V2.1
   7          
   8            [2014-08-28] V2.1
   9            - HAL_McuIdleMode() : enhanced.
  10          
  11            [2012-04-25] V2.0
  12            - Initial Version for MG2470B(ChipID=0x71)
  13          *******************************************************************************/
  14          
  15          #include "INCLUDE_MG2470.h"
  16          #include "power.h"
  17          #include "phy.h"
  18          #include "wdt.h"
  19          
  20          ///////////////////////////////////////////////////////////////////////////////////////////////
  21          /// 
  22          ///   Global variable which indicates whether Sleep Timer interrupt is generated.
  23          /// When Sleep Timer interrupt is generated, it is set to 1.
  24          /// And after processing the interrupt, it should be cleared.
  25          /// 
  26          ///////////////////////////////////////////////////////////////////////////////////////////////
  27          UINT8 gu8SleepTimerIntFlag = 0;
  28          
  29          ///////////////////////////////////////////////////////////////////////////////////////////////
  30          /// 
  31          ///   Global variable which indicates whether Wake-up interrupt is generated.
  32          /// When Wake-up interrupt is generated, it is set to 1.
  33          /// And after processing the interrupt, it should be cleared.
  34          /// 
  35          ///////////////////////////////////////////////////////////////////////////////////////////////
  36          UINT8 gu8WakeupIntFlag = 0;
  37          
  38          #ifdef __MG2470_POWER_RTC_INCLUDE_
  39          ///////////////////////////////////////////////////////////////////////////////////////////////
  40          /// 
  41          ///   Sets parameters of RTC interrupt.
  42          ///
  43          /// @param  u8IntEna      : 0=Disable, 1=Enable.
  44          /// @param  u8Priority      : Priority of Interrupt. 0=Disable, 1=Enable.
  45          /// @param  u16Tick_1s    : Period in second.
  46          /// @param  u8Tick_3906us : Period in 3906 us.
  47          /// @return UINT8. Status
  48          /// @note Total power-down period = (1 second * u16Tick_1s) + (3.906 ms * u8Tick_3906us)
  49          /// 
  50          ///////////////////////////////////////////////////////////////////////////////////////////////
  51          UINT8 HAL_RtcIntSet(UINT8 u8IntEna, UINT8 u8Priority, UINT16 u16Tick_1s, UINT8 u8Tick_3906us)
  52          {
  53   1        RTCIP = u8Priority;
C51 COMPILER V9.53.0.0   POWER                                                             01/28/2020 11:28:54 PAGE 2   

  54   1        if(u8IntEna)
  55   1        {
  56   2          if( (u16Tick_1s == 0) && (u8Tick_3906us == 0) )
  57   2          {
  58   3            assert_error(POWER_CODE | RETURN_POWER_INVALID_PARAMETER);
  59   3            return RETURN_POWER_INVALID_PARAMETER;
  60   3          }
  61   2        
  62   2          xRCOSC = 0x6E;  // RC Calibration enabled
  63   2          xRTINT1 = u16Tick_1s >> 8;
  64   2          xRTINT2 = u16Tick_1s;
  65   2          xRTINT3 = u8Tick_3906us;
  66   2          xPDMON &= ~(BIT4 | BIT3);
  67   2          xPDMON |= BIT7; // Sleep Timer mode bit[7] = 0 : 30us, bit[7] = 1 : 3.906ms.
  68   2          STIE = 1;
  69   2          xPDCON |= BIT5;   // bit[5]=1, Enable sleep timer.
  70   2        }
  71   1        else
  72   1        {
  73   2          STIE = 0;
  74   2          xPDCON &= ~BIT5;  // bit[5]=0, Disable sleep timer.
  75   2        }
  76   1      
  77   1        return  RETURN_POWER_SUCCESS;
  78   1      }
  79          #endif  // #ifdef __MG2470_POWER_RTC_INCLUDE_
  80          
  81          #ifdef __MG2470_POWER_SLEEP_INCLUDE_
  82          ///////////////////////////////////////////////////////////////////////////////////////////////
  83          /// 
  84          ///   Sets RF and Analog blocks to sleep mode.
  85          ///
  86          /// @param  u8Option  : Option
  87          ///           \n  bit[7:1] : reserved
  88          ///           \n  bit[0] : 1=Use ADC during sleep state. 0=Not use ADC.
  89          /// @return UINT8. Status.
  90          /// 
  91          ///////////////////////////////////////////////////////////////////////////////////////////////
  92          UINT8 HAL_RFAnalogSleep(UINT8 u8Option)
  93          {
  94   1        if(u8Option & 0x01)   // ADC is enabled during sleep state.
  95   1        {
  96   2        }
  97   1        else
  98   1        {
  99   2          xPDCON = BIT7 | BIT4 | BIT3;  // BOD=1, AVREG=0, ST=0, HRCOSC=1, RCOSC=1
 100   2        }
 101   1        xPHY_CLK_FR_EN1 = 0;
 102   1      
 103   1        HAL_ModemOff();
 104   1      
 105   1        xPHY_CLK_EN0 = 0x00;
 106   1        xPHY_CLK_EN1 = 0x00;
 107   1      
 108   1        if(u8Option & 0x01)   // ADC is enabled during sleep state.
 109   1        {
 110   2          xPLLPU &= ~BIT7;
 111   2        }
 112   1      
 113   1        return RETURN_POWER_SUCCESS;
 114   1      }
 115          
C51 COMPILER V9.53.0.0   POWER                                                             01/28/2020 11:28:54 PAGE 3   

 116          ///////////////////////////////////////////////////////////////////////////////////////////////
 117          /// 
 118          ///   Wakes RF and Analog blocks from sleep mode.
 119          ///
 120          /// @param  void
 121          /// @return UINT8. Status.
 122          /// 
 123          ///////////////////////////////////////////////////////////////////////////////////////////////
 124          UINT8 HAL_RFAnalogWakeup(void)
 125          {
 126   1        UINT8 u8Status;
 127   1      
 128   1        xPDCON = 0xD8;            // BOD=1, AVREG=1, ST=0, HRCOSC=1, RCOSC=1
 129   1      
 130   1      //  xPHY_CLK_FR_EN1 = BIT5;
 131   1        xPHY_CLK_EN0 = 0xF6;
 132   1        xPHY_CLK_EN1 = 0x23;
 133   1      
 134   1        HAL_ModemOff();
 135   1        u8Status = HAL_ModemOn(10000, 0);
 136   1      
 137   1        if(u8Status)
 138   1        {
 139   2          HAL_ModemOff();
 140   2          u8Status = HAL_ModemOn(10000, 0);
 141   2        }
 142   1      
 143   1        return u8Status;
 144   1      }
 145          #endif  // #ifdef __MG2470_POWER_SLEEP_INCLUDE_
 146          
 147          #ifdef __MG2470_POWER_IDLE_INCLUDE_
 148          ///////////////////////////////////////////////////////////////////////////////////////////////
 149          /// 
 150          ///   Sets MCU to IDLE mode. And, sets peripherals as wake-up sources.
 151          ///
 152          /// @param  u8WakeIE  : Wake-up source in IE register. If each bit is set to 1, the corresponding interrupt 
             -is 
 153          ///             used for wake-up source.
 154          ///           \n  bit[7] : N/A
 155          ///           \n  bit[6] : 1=UART1
 156          ///           \n  bit[5] : reserved
 157          ///           \n  bit[4] : 1=UART0
 158          ///           \n  bit[3] : 1=TIMER1
 159          ///           \n  bit[2] : 1=External 1
 160          ///           \n  bit[1] : 1=TIMER0
 161          ///           \n  bit[0] : 1=External 0
 162          /// @param  u8WakeEIE1  : Wake-up source in EIE1 register. If each bit is set to 1, the corresponding interr
             -upt is 
 163          ///             used for wake-up source.
 164          ///           \n  bit[7] : 1=Wake-up
 165          ///           \n  bit[6] : 1=DMA
 166          ///           \n  bit[5] : 1=SPI
 167          ///           \n  bit[4] : 1=Sleep Timer
 168          ///           \n  bit[3] : should be 0.
 169          ///           \n  bit[2] : should be 0.
 170          ///           \n  bit[1] : should be 0.
 171          ///           \n  bit[0] : 1=PHY
 172          /// @param  u8WakeEIE2  : Wake-up source in EIE2 register. If each bit is set to 1, the corresponding interr
             -upt is 
 173          ///             used for wake-up source.
 174          ///           \n  bit[7:4] : reserved
C51 COMPILER V9.53.0.0   POWER                                                             01/28/2020 11:28:54 PAGE 4   

 175          ///           \n  bit[3] : 1=PWM
 176          ///           \n  bit[2] : should be 0.
 177          ///           \n  bit[1] : 1=I2C
 178          ///           \n  bit[0] : 1=IRTX
 179          /// @return void
 180          /// 
 181          ///////////////////////////////////////////////////////////////////////////////////////////////
 182          UINT8 HAL_McuIdleMode(UINT8 u8WakeIE, UINT8 u8WakeEIE1, UINT8 u8WakeEIE2)
 183          {
 184   1        UINT8 u8IE;
 185   1        UINT8 u8EIE1;
 186   1        UINT8 u8EIE2;
 187   1      
 188   1        UINT8 u8CheckTemp;
 189   1        UINT8 ib;
 190   1      
 191   1        u8CheckTemp = 0;
 192   1        for(ib = 0; ib < 7; ib++)
 193   1        {
 194   2          u8CheckTemp += ((u8WakeIE >> ib) & BIT0);
 195   2          u8CheckTemp += ((u8WakeEIE1 >> ib) & BIT0);
 196   2          u8CheckTemp += ((u8WakeEIE2 >> ib) & BIT0);
 197   2        }
 198   1      
 199   1        if(u8CheckTemp >= 2)
 200   1        {
 201   2          assert_error(POWER_CODE | RETURN_POWER_TOO_MANY_INPUT);
 202   2          return RETURN_POWER_INVALID_PARAMETER;
 203   2        }
 204   1      
 205   1        SYS_WdtSet(0);    // Disable watchdog. If not, watchdog reset is caused.
 206   1      
 207   1        u8IE = IE;
 208   1        u8EIE1 = EIE1;
 209   1        u8EIE2 = EIE2;
 210   1      
 211   1        IE = u8WakeIE & 0x7F;
 212   1        EIE1 = u8WakeEIE1;
 213   1        EIE2 = u8WakeEIE2;
 214   1      
 215   1        IE |= BIT7; // EA=1
 216   1      
 217   1        PCON = 0x01;
 218   1        _nop_();
 219   1        _nop_();
 220   1      
 221   1        IE = 0x00;  // EA=0
 222   1        
 223   1        EIE2 = u8EIE2;
 224   1        EIE1 = u8EIE1;
 225   1        IE = u8IE;
 226   1      
 227   1        return 0;
 228   1      }
 229          #endif  // #ifdef __MG2470_POWER_IDLE_INCLUDE_
 230          
 231          #ifdef __MG2470_POWER_PM1_INCLUDE_
 232          ///////////////////////////////////////////////////////////////////////////////////////////////
 233          /// 
 234          ///   Enters into power-down mode 1 (PM1).
 235          /// \n Wake-up Source=H/W Reset, GPIO, Sleep timer.
 236          /// \n In PM1, Analog Voltage Regulator of MG2470B is off, and Digital Regulator is on.
C51 COMPILER V9.53.0.0   POWER                                                             01/28/2020 11:28:54 PAGE 5   

 237          ///
 238          /// @param  u16Tick_1s    : Period in second. 
 239          ///             \n If bit[7] of "u8Opt" is 1, the period is changed to 7.8 ms(=1 second / 128)
 240          /// @param  u8Tick_3906us : Period in 3906 us. 
 241          ///             \n If bit[7] of "u8Opt" is 1, the period is changed to 30.5 us(=3906 us / 128)
 242          /// @param  u8Tick_65536s : Period in 65536 seconds. Valid range is 0 ~ 3. 
 243          ///             \n If bit[7] of "u8Opt" is 1, the period is changed to 512 second(= 65536 second / 128)
 244          /// @param  u8Opt     : Options for power-down.
 245          ///             \n  bit[7]  : Specifies the period of 1 tick. If it is 1, the default period is divided by 128.
 246          ///             \n  bit[6:2]  : reserved
 247          ///             \n  bit[1]  : 1=External RCOSC(P1.3 & P1.4) is used for clock.
 248          ///             \n  bit[0]  : 1=Wake-up only by GPIOs.
 249          /// @return UINT8. Status.
 250          ///
 251          /// @note Total power-down period = (1 sec * u16Tick_1s) + (3.906 ms * u8Tick_3906us) + (65536 sec * u8Tic
             -k_65536s)
 252          ///   \n If bit[7] of "u8Opt" is 1, Total power-down period = { (1 sec * u16Tick_1s) + (3.906 ms * u8Tick_3
             -906us) + (65536 sec * u8Tick_65536s) } / 128
 253          /// 
 254          ///////////////////////////////////////////////////////////////////////////////////////////////
 255          UINT8 HAL_PowerdownMode1(UINT16 u16Tick_1s, UINT8 u8Tick_3906us, UINT8 u8Tick_65536s, UINT8 u8Opt)
 256          {
 257   1        UINT8 u8STP2;
 258   1        UINT8 u8IE;
 259   1        UINT8 u8EIE1;
 260   1        UINT8 u8EIE2;
 261   1        UINT8 u8xPDMON;
 262   1        UINT8 u8SetPDCON;
 263   1        UINT8 u8xPDCON;
 264   1        UINT8 u8xRCOSC;
 265   1        UINT8 u8Status;
 266   1        UINT8 u8ExpectedGPIO0;
 267   1        UINT8 u8ExpectedGPIO1;
 268   1        UINT8 u8ExpectedGPIO3;
 269   1        UINT8 u8xGPIOPE1;
 270   1      
 271   1        if( xGPIOMSK0 != (P0_IE & xGPIOMSK0) )
 272   1        {
 273   2          assert_error(POWER_CODE | RETURN_POWER_DISABLED_PORT_READ);
 274   2          return RETURN_POWER_DISABLED_PORT_READ;   
 275   2        }
 276   1      
 277   1        if( xGPIOMSK1 != (P1_IE & xGPIOMSK1) )
 278   1        {
 279   2          assert_error(POWER_CODE | RETURN_POWER_DISABLED_PORT_READ);
 280   2          return RETURN_POWER_DISABLED_PORT_READ;   
 281   2        }
 282   1      
 283   1        if( xGPIOMSK3 != (P3_IE & xGPIOMSK3) )
 284   1        {
 285   2          assert_error(POWER_CODE | RETURN_POWER_DISABLED_PORT_READ);
 286   2          return RETURN_POWER_DISABLED_PORT_READ;   
 287   2        }
 288   1      
 289   1        if(u8Tick_65536s > 3)
 290   1        {
 291   2          assert_error(POWER_CODE | RETURN_POWER_INVALID_PARAMETER);
 292   2          return RETURN_POWER_INVALID_PARAMETER;
 293   2        }
 294   1      
 295   1        HAL_ModemOff();
 296   1        
C51 COMPILER V9.53.0.0   POWER                                                             01/28/2020 11:28:54 PAGE 6   

 297   1        u8Status = RETURN_POWER_SUCCESS;
 298   1      
 299   1        // Disable watchdog
 300   1        SYS_WdtSet(0);  
 301   1      
 302   1        u8IE = IE;
 303   1        IE = 0x00;
 304   1      
 305   1        u8xGPIOPE1 = xGPIOPE1;
 306   1        u8xRCOSC = xRCOSC;
 307   1        u8xPDCON = xPDCON;
 308   1        u8xPDMON = xPDMON;
 309   1        u8EIE1 = EIE1;
 310   1        u8EIE2 = EIE2;
 311   1        u8STP2 = PERI_CLK_STP2;
 312   1        PERI_CLK_STP2 = 0x07;
 313   1        EIE1 = 0x00;
 314   1        EIE2 = 0x00;
 315   1      
 316   1        xRCOSC = 0x6E;    // RC Calibration enabled 
 317   1        xPDMON &= ~BIT2;  // bit[2]=0. Disable ADC current. 
 318   1        xPDMON &= ~(BIT4 | BIT3);   // RTINT Expand = 0
 319   1        if(u8Opt & BIT7)
 320   1        {
 321   2          xPDMON &= ~BIT7;  // bit[7] = 0. Divided-by-128 tick period.
 322   2        }
 323   1        else
 324   1        {
 325   2          xPDMON |= BIT7;   // bit[7] = 1. Default tick period.
 326   2        }
 327   1        xPDMON |= (u8Tick_65536s & 0x03) << 3;  // RTINT Expand
 328   1        xRTINT1 = u16Tick_1s >> 8;
 329   1        xRTINT2 = u16Tick_1s;
 330   1        xRTINT3 = u8Tick_3906us;
 331   1        xRTDLY  = 0x90;
 332   1      
 333   1        WUIF = 1;   // WUIF=1. clear interrupt flag
 334   1        EIE1 = 0x80;    // WUIE=1 
 335   1        IE = 0x80;    // EA=1
 336   1      
 337   1        u8SetPDCON = 0xB9;    // BOD=1, AVREG=0, ST=1, HSRCOSC=1, RCOSC=1, ExtRCOSC=0, Mode=2'b01
 338   1        // Option for power-down
 339   1        if(u8Opt & BIT0)  u8SetPDCON &= ~BIT5;  // bit[5]=0. Disable sleep timer.
 340   1        if(u8Opt & BIT1)
 341   1        {
 342   2          u8SetPDCON |= BIT2;   // bit[2]=1. External RCOSC(P1.3 & P1.4)
 343   2          xGPIOPE1 &= ~(BIT3 |BIT4);
 344   2        }
 345   1        xPDCON = u8SetPDCON;
 346   1      
 347   1        PERI_CLK_STP2 = 0x00;
 348   1        while(WDT & 0x20);
 349   1      
 350   1        u8ExpectedGPIO0 = xGPIOMSK0 & (P0 ^ xGPIOPOL0);
 351   1        u8ExpectedGPIO1 = xGPIOMSK1 & (P1 ^ xGPIOPOL1);
 352   1        u8ExpectedGPIO3 = xGPIOMSK3 & (P3 ^ xGPIOPOL3);
 353   1      
 354   1        if( (xGPIOMSK0 == u8ExpectedGPIO0)
 355   1        &&  (xGPIOMSK1 == u8ExpectedGPIO1)
 356   1        &&  (xGPIOMSK3 == u8ExpectedGPIO3) )
 357   1        {
 358   2          PCON = 0x02;
C51 COMPILER V9.53.0.0   POWER                                                             01/28/2020 11:28:54 PAGE 7   

 359   2          _nop_(); _nop_(); _nop_(); _nop_(); _nop_();
 360   2          _nop_(); _nop_(); _nop_(); _nop_(); _nop_();
 361   2        } 
 362   1        else
 363   1        {
 364   2          u8Status = RETURN_POWER_WRONG_GPIO_VALUE;
 365   2        }
 366   1      
 367   1        PERI_CLK_STP2 = u8STP2;
 368   1        WUIF = 1;
 369   1        CLKCON2 &= ~BIT6; // bit[6]=0. Clock source change HSRCOSC --> 32MHz crystal
 370   1        EIE1 = u8EIE1;
 371   1        EIE2 = u8EIE2;
 372   1        xPDCON = u8xPDCON;
 373   1        xPDMON = u8xPDMON;
 374   1        xRCOSC = u8xRCOSC;
 375   1        xGPIOPE1 = u8xGPIOPE1;
 376   1      
 377   1        IE = u8IE;
 378   1      
 379   1        if(u8Status)
 380   1        {
 381   2          assert_error(POWER_CODE | u8Status);
 382   2        }
 383   1      
 384   1        HAL_ModemOn(10000, 0);
 385   1        
 386   1        return u8Status;
 387   1      }
 388          #endif  // #ifdef __MG2470_POWER_PM1_INCLUDE_
 389          
 390          #ifdef __MG2470_POWER_PM2_INCLUDE_
 391          ///////////////////////////////////////////////////////////////////////////////////////////////
 392          /// 
 393          ///   Enters into power-down mode 2 (PM2).
 394          /// \n Wake-up Source=H/W Reset, GPIO, Sleep timer. 
 395          /// \n In PM2, Analog Voltage Regulator of MG2470B is off, and Digital Regulator is off.
 396          ///
 397          /// @param  u16Tick_1s    : Period in second.
 398          ///             \n If bit[7] of "u8Opt" is 1, the period is changed to 7.8 ms(=1 second / 128)
 399          /// @param  u8Tick_3906us : Period in 3906 us.
 400          ///             \n If bit[7] of "u8Opt" is 1, the period is changed to 30.5 us(=3906 us / 128)
 401          /// @param  u8Tick_65536s : Period in 65536 seconds. Valid range is 0 ~ 3. 
 402          ///             \n If bit[7] of "u8Opt" is 1, the period is changed to 512 second(= 65536 second / 128)
 403          /// @param  u8Opt     : Options for power-down.
 404          ///             \n  bit[7]  : Specifies the period of 1 tick. If it is 1, the default period is divided by 128.
 405          ///             \n  bit[6:2]  : reserved
 406          ///             \n  bit[1]  : 1=External RCOSC(P1.3 & P1.4) is used for clock.
 407          ///             \n  bit[0]  : 1=Wake-up only by GPIOs.
 408          /// @return UINT8. Status.
 409          ///
 410          /// @note Total power-down period = (1 sec * u16Tick_1s) + (3.906 ms * u8Tick_3906us) + (65536 sec * u8Tic
             -k_65536s)
 411          ///   \n If bit[7] of "u8Opt" is 1, Total power-down period = { (1 sec * u16Tick_1s) + (3.906 ms * u8Tick_3
             -906us) + (65536 sec * u8Tick_65536s) } / 128
 412          /// 
 413          ///////////////////////////////////////////////////////////////////////////////////////////////
 414          UINT8 HAL_PowerdownMode2(UINT16 u16Tick_1s, UINT8 u8Tick_3906us, UINT8 u8Tick_65536s, UINT8 u8Opt)
 415          {
 416   1        UINT8 u8STP2;
 417   1        UINT8 u8IE;
 418   1        UINT8 u8EIE1;
C51 COMPILER V9.53.0.0   POWER                                                             01/28/2020 11:28:54 PAGE 8   

 419   1        UINT8 u8EIE2;
 420   1        UINT8 u8xPDMON;
 421   1        UINT8 u8SetPDCON;
 422   1        UINT8 u8xPDCON;
 423   1        UINT8 u8xRCOSC;
 424   1        UINT8 u8Status;
 425   1        UINT8 u8ExpectedGPIO0;
 426   1        UINT8 u8ExpectedGPIO1;
 427   1        UINT8 u8ExpectedGPIO3;
 428   1        UINT8 u8xGPIOPE1;
 429   1      
 430   1        if( xGPIOMSK0 != (P0_IE & xGPIOMSK0) )
 431   1        {
 432   2          assert_error(POWER_CODE | RETURN_POWER_DISABLED_PORT_READ);
 433   2          return RETURN_POWER_DISABLED_PORT_READ;   
 434   2        }
 435   1      
 436   1        if( xGPIOMSK1 != (P1_IE & xGPIOMSK1) )
 437   1        {
 438   2          assert_error(POWER_CODE | RETURN_POWER_DISABLED_PORT_READ);
 439   2          return RETURN_POWER_DISABLED_PORT_READ;   
 440   2        }
 441   1      
 442   1        if( xGPIOMSK3 != (P3_IE & xGPIOMSK3) )
 443   1        {
 444   2          assert_error(POWER_CODE | RETURN_POWER_DISABLED_PORT_READ);
 445   2          return RETURN_POWER_DISABLED_PORT_READ;   
 446   2        }
 447   1      
 448   1        if(u8Tick_65536s > 3)
 449   1        {
 450   2          assert_error(POWER_CODE | RETURN_POWER_INVALID_PARAMETER);
 451   2          return RETURN_POWER_INVALID_PARAMETER;
 452   2        }
 453   1      
 454   1        u8Status = RETURN_POWER_SUCCESS;
 455   1      
 456   1        // Watchdog for abnormal state
 457   1        SYS_WdtSet(10000);  
 458   1      
 459   1        u8IE = IE;
 460   1        IE = 0x00;
 461   1      
 462   1        u8xGPIOPE1 = xGPIOPE1;
 463   1        u8xRCOSC = xRCOSC;
 464   1        u8xPDCON = xPDCON;
 465   1        u8xPDMON = xPDMON;
 466   1        u8EIE1 = EIE1;
 467   1        u8EIE2 = EIE2;
 468   1        u8STP2 = PERI_CLK_STP2;
 469   1        PERI_CLK_STP2 = 0x07;
 470   1        EIE1 = 0x00;
 471   1        EIE2 = 0x00;
 472   1        
 473   1        xRCOSC = 0x6E;    // RC Calibration enabled 
 474   1        xPDMON &= ~BIT2;  // bit[2]=0. Disable ADC current. 
 475   1        xPDMON &= ~(BIT4 | BIT3);   // RTINT Expand = 0
 476   1        if(u8Opt & BIT7)
 477   1        {
 478   2          xPDMON &= ~BIT7;  // bit[7] = 0. Divided-by-128 tick period.
 479   2        }
 480   1        else
C51 COMPILER V9.53.0.0   POWER                                                             01/28/2020 11:28:54 PAGE 9   

 481   1        {
 482   2          xPDMON |= BIT7;   // bit[7] = 1. Default tick period.
 483   2        } 
 484   1        xPDMON |= (u8Tick_65536s & 0x03) << 3;  // RTINT Expand
 485   1        xRTINT1 = u16Tick_1s >> 8;
 486   1        xRTINT2 = u16Tick_1s;
 487   1        xRTINT3 = u8Tick_3906us;
 488   1        xRTDLY  = 0x90;
 489   1      
 490   1        WUIF = 1;   // WUIF=1. clear interrupt flag
 491   1        EIE1 = 0x80;    // WUIE=1 
 492   1        IE = 0x80;    // EA=1
 493   1      
 494   1        u8SetPDCON = 0xBA;    // BOD=1, AVREG=0, ST=1, HSRCOSC=1, RCOSC=1, ExtRCOSC=0, Mode=2'b10
 495   1        // Option for power-down
 496   1        if(u8Opt & BIT0)  u8SetPDCON &= ~BIT5;  // bit[5]=0. Disable sleep timer.
 497   1        if(u8Opt & BIT1)
 498   1        {
 499   2          u8SetPDCON |= BIT2;   // bit[2]=1. External RCOSC(P1.3 & P1.4)
 500   2          xGPIOPE1 &= ~(BIT3 |BIT4);  
 501   2        }
 502   1        xPDCON = u8SetPDCON;
 503   1      
 504   1        PERI_CLK_STP2 = 0x00;
 505   1        while(WDT & 0x20);
 506   1      
 507   1        u8ExpectedGPIO0 = xGPIOMSK0 & (P0 ^ xGPIOPOL0);
 508   1        u8ExpectedGPIO1 = xGPIOMSK1 & (P1 ^ xGPIOPOL1);
 509   1        u8ExpectedGPIO3 = xGPIOMSK3 & (P3 ^ xGPIOPOL3);
 510   1      
 511   1        if( (xGPIOMSK0 == u8ExpectedGPIO0)
 512   1        &&  (xGPIOMSK1 == u8ExpectedGPIO1)
 513   1        &&  (xGPIOMSK3 == u8ExpectedGPIO3) )
 514   1        {
 515   2          PCON = 0x02;
 516   2          _nop_(); _nop_(); _nop_(); _nop_(); _nop_();
 517   2          _nop_(); _nop_(); _nop_(); _nop_(); _nop_();    
 518   2        }
 519   1        else
 520   1        {
 521   2          u8Status = RETURN_POWER_WRONG_GPIO_VALUE;
 522   2        } 
 523   1      
 524   1        PERI_CLK_STP2 = u8STP2;
 525   1        WUIF = 1;
 526   1        CLKCON2 &= ~BIT6; // bit[6]=0. Clock source change HSRCOSC --> 32MHz crystal
 527   1        EIE1 = u8EIE1;
 528   1        EIE2 = u8EIE2;
 529   1        xPDCON = u8xPDCON;  
 530   1        xPDMON = u8xPDMON;
 531   1        xRCOSC = u8xRCOSC;
 532   1        xGPIOPE1 = u8xGPIOPE1;
 533   1      
 534   1        IE = u8IE;
 535   1      
 536   1        if(u8Status)
 537   1        {
 538   2          assert_error(POWER_CODE | u8Status);
 539   2        }
 540   1        return u8Status;
 541   1      }
 542          #endif  // #ifdef __MG2470_POWER_PM2_INCLUDE_
C51 COMPILER V9.53.0.0   POWER                                                             01/28/2020 11:28:54 PAGE 10  

 543          
 544          #ifdef __MG2470_POWER_PM3_INCLUDE_
 545          ///////////////////////////////////////////////////////////////////////////////////////////////
 546          /// 
 547          ///   Enters into power-down mode 3 (PM3).
 548          /// \n Wake-up Source=H/W Reset, GPIO. AVREG=Off. DVREG=Off
 549          /// \n In PM3, Analog Voltage Regulator of MG2470B is off, and Digital Regulator is off.
 550          ///
 551          /// @param  u8Opt     : Options for power-down.
 552          ///             \n  bit[7:2]  : reserved
 553          ///             \n  bit[1]  : 1=External RCOSC(P1.3 & P1.4) is used for clock.
 554          ///             \n  bit[0]  : reserved
 555          /// @return UINT8. Status.
 556          ///
 557          ///////////////////////////////////////////////////////////////////////////////////////////////
 558          UINT8 HAL_PowerdownMode3(UINT8 u8Opt)
 559          {
 560   1        UINT8 u8STP2;
 561   1        UINT8 u8IE;
 562   1        UINT8 u8EIE1;
 563   1        UINT8 u8EIE2;
 564   1        UINT8 u8xPDMON;
 565   1        UINT8 u8SetPDCON;
 566   1        UINT8 u8xPDCON;
 567   1        UINT8 u8xRCOSC;
 568   1        UINT8 u8Status;
 569   1        UINT8 u8ExpectedGPIO0;
 570   1        UINT8 u8ExpectedGPIO1;
 571   1        UINT8 u8ExpectedGPIO3;
 572   1        UINT8 u8xGPIOPE1;
 573   1      
 574   1        if( xGPIOMSK0 != (P0_IE & xGPIOMSK0) )
 575   1        {
 576   2          assert_error(POWER_CODE | RETURN_POWER_DISABLED_PORT_READ);
 577   2          return RETURN_POWER_DISABLED_PORT_READ;   
 578   2        }
 579   1      
 580   1        if( xGPIOMSK1 != (P1_IE & xGPIOMSK1) )
 581   1        {
 582   2          assert_error(POWER_CODE | RETURN_POWER_DISABLED_PORT_READ);
 583   2          return RETURN_POWER_DISABLED_PORT_READ;   
 584   2        }
 585   1      
 586   1        if( xGPIOMSK3 != (P3_IE & xGPIOMSK3) )
 587   1        {
 588   2          assert_error(POWER_CODE | RETURN_POWER_DISABLED_PORT_READ);
 589   2          return RETURN_POWER_DISABLED_PORT_READ;   
 590   2        }
 591   1      
 592   1        u8Status = RETURN_POWER_SUCCESS;
 593   1      
 594   1        // Watchdog for abnormal state
 595   1        SYS_WdtSet(10000);
 596   1      
 597   1        u8IE = IE;
 598   1        IE = 0x00;
 599   1      
 600   1        u8xGPIOPE1 = xGPIOPE1;
 601   1        u8xRCOSC = xRCOSC;
 602   1        u8xPDCON = xPDCON;
 603   1        u8xPDMON = xPDMON;
 604   1        u8EIE1 = EIE1;
C51 COMPILER V9.53.0.0   POWER                                                             01/28/2020 11:28:54 PAGE 11  

 605   1        u8EIE2 = EIE2;
 606   1        u8STP2 = PERI_CLK_STP2;
 607   1        PERI_CLK_STP2 = 0x07;
 608   1        EIE1 = 0x00;
 609   1        EIE2 = 0x00;
 610   1        
 611   1        xRCOSC = 0x6E;    // RC Calibration enabled 
 612   1        xPDMON &= ~BIT2;  // bit[2]=0. Disable ADC current. 
 613   1        xPDMON &= ~(BIT4 | BIT3);   // RTINT Expand = 0
 614   1        xRTDLY  = 0x90;
 615   1      
 616   1        WUIF = 1;   // WUIF=1. clear interrupt flag
 617   1        EIE1 = 0x80;    // WUIE=1 
 618   1        IE = 0x80;    // EA=1
 619   1      
 620   1        u8SetPDCON = 0x9B;    // BOD=1, AVREG=0, ST=0, HSRCOSC=1, RCOSC=1, ExtRCOSC=0, Mode=2'b11
 621   1        // Option for power-down
 622   1        if(u8Opt & BIT1)
 623   1        {
 624   2          u8SetPDCON |= BIT2;   // bit[2]=1. External RCOSC(P1.3 & P1.4)
 625   2          xGPIOPE1 &= ~(BIT3 |BIT4);
 626   2        }
 627   1        xPDCON = u8SetPDCON;
 628   1      
 629   1        PERI_CLK_STP2 = 0x00;
 630   1        while(WDT & 0x20);
 631   1      
 632   1        u8ExpectedGPIO0 = xGPIOMSK0 & (P0 ^ xGPIOPOL0);
 633   1        u8ExpectedGPIO1 = xGPIOMSK1 & (P1 ^ xGPIOPOL1);
 634   1        u8ExpectedGPIO3 = xGPIOMSK3 & (P3 ^ xGPIOPOL3);
 635   1      
 636   1        if( (xGPIOMSK0 == u8ExpectedGPIO0)
 637   1        &&  (xGPIOMSK1 == u8ExpectedGPIO1)
 638   1        &&  (xGPIOMSK3 == u8ExpectedGPIO3) )
 639   1        {
 640   2          PCON = 0x02;
 641   2          _nop_(); _nop_(); _nop_(); _nop_(); _nop_();
 642   2          _nop_(); _nop_(); _nop_(); _nop_(); _nop_();    
 643   2        }
 644   1        else
 645   1        {
 646   2          u8Status = RETURN_POWER_WRONG_GPIO_VALUE;
 647   2        } 
 648   1      
 649   1        PERI_CLK_STP2 = u8STP2;
 650   1        WUIF = 1;
 651   1        CLKCON2 &= ~BIT6; // bit[6]=0. Clock source change HSRCOSC --> 32MHz crystal
 652   1        EIE1 = u8EIE1;
 653   1        EIE2 = u8EIE2;
 654   1        xPDCON = u8xPDCON;  
 655   1        xPDMON = u8xPDMON;
 656   1        xRCOSC = u8xRCOSC;
 657   1        xGPIOPE1 = u8xGPIOPE1;
 658   1      
 659   1        IE = u8IE;
 660   1      
 661   1        if(u8Status)
 662   1        {
 663   2          assert_error(POWER_CODE | u8Status);
 664   2        }
 665   1        return u8Status;
 666   1      }
C51 COMPILER V9.53.0.0   POWER                                                             01/28/2020 11:28:54 PAGE 12  

 667          #endif  // #ifdef __MG2470_POWER_PM3_INCLUDE_
 668          
 669          #ifdef __MG2470_POWER_GPIO_INCLUDE_
 670          ///////////////////////////////////////////////////////////////////////////////////////////////
 671          /// 
 672          ///   Sets a port of GPIO0(0.x) as the wake-up source.
 673          ///
 674          /// @param  u8Port    : 0~7=Port Number
 675          /// @param  u8WakeupEna : Specifies whether the port is used for wake-up source. 0=Disable, 1=Enable.
 676          /// @param  u8RisingEdge  : Specifies the edge polarity for wake-up. 
 677          ///           \n 0=Wake-up on falling edge. In this case, the internal connection of the port is pull-up. 
 678          ///           \n 1=Wake-up on rising edge. In this case, the internal connection of the port is pull-down.
 679          /// @return UINT8. Status.
 680          /// 
 681          ///////////////////////////////////////////////////////////////////////////////////////////////
 682          UINT8 HAL_PowerdownGpio0WakeupSourceSet(UINT8 u8Port, UINT8 u8WakeupEna, UINT8 u8RisingEdge)
 683          {
 684   1        UINT8 u8MaskBit;
 685   1      
 686   1        if(u8Port > 7)
 687   1        {
 688   2          assert_error(POWER_CODE | RETURN_POWER_INVALID_GPIO_PORT);
 689   2          return RETURN_POWER_INVALID_GPIO_PORT;    
 690   2        }
 691   1      
 692   1        u8MaskBit = (0x01 << u8Port);
 693   1      
 694   1        xGPIOPE0 |= u8MaskBit;      // PE0[n]=1. Input mode.
 695   1        if(u8RisingEdge)
 696   1        {
 697   2          xGPIOPOL0 |= u8MaskBit;   // POL0[n]=1. Rising edge.
 698   2          xGPIOPS0 &= ~u8MaskBit;   // PS0[n]=0. Pull-down.
 699   2        }
 700   1        else
 701   1        {
 702   2          xGPIOPOL0 &= ~u8MaskBit;    // POL0[n]=0. Falling edge.
 703   2          xGPIOPS0 |= u8MaskBit;    // PS0[n]=1. Pull-up.
 704   2        }
 705   1      
 706   1        if(u8WakeupEna)
 707   1        {
 708   2          xGPIOMSK0 |= u8MaskBit;   // MSK0[n]=1. Enable as a wake-up source.
 709   2        }
 710   1        else
 711   1        {
 712   2          xGPIOMSK0 &= ~u8MaskBit;    // MSK0[n]=0. Disable
 713   2        }
 714   1      
 715   1        return RETURN_POWER_SUCCESS;
 716   1      }
 717          
 718          ///////////////////////////////////////////////////////////////////////////////////////////////
 719          /// 
 720          ///   Sets a port of GPIO1(1.x) as the wake-up source.
 721          ///
 722          /// @param  u8Port    : 0~7=Port Number
 723          /// @param  u8WakeupEna : Specifies whether the port is used for wake-up source. 0=Disable, 1=Enable.
 724          /// @param  u8RisingEdge  : Specifies the edge polarity for wake-up. 
 725          ///           \n 0=Wake-up on falling edge. In this case, the internal connection of the port is pull-up. 
 726          ///           \n 1=Wake-up on rising edge. In this case, the internal connection of the port is pull-down.
 727          /// @return UINT8. Status.
 728          /// 
C51 COMPILER V9.53.0.0   POWER                                                             01/28/2020 11:28:54 PAGE 13  

 729          ///////////////////////////////////////////////////////////////////////////////////////////////
 730          UINT8 HAL_PowerdownGpio1WakeupSourceSet(UINT8 u8Port, UINT8 u8WakeupEna, UINT8 u8RisingEdge)
 731          {
 732   1        UINT8 u8MaskBit;
 733   1      
 734   1        if(u8Port > 7)
 735   1        {
 736   2          assert_error(POWER_CODE | RETURN_POWER_INVALID_GPIO_PORT);
 737   2          return RETURN_POWER_INVALID_GPIO_PORT;    
 738   2        }
 739   1      
 740   1        u8MaskBit = (0x01 << u8Port);
 741   1      
 742   1        xGPIOPE1 |= u8MaskBit;      // PE1[n]=1. Input mode.
 743   1        if(u8RisingEdge)
 744   1        {
 745   2          xGPIOPOL1 |= u8MaskBit;   // POL1[n]=1. Rising edge.
 746   2          xGPIOPS1 &= ~u8MaskBit;   // PS1[n]=0. Pull-down.
 747   2        }
 748   1        else
 749   1        {
 750   2          xGPIOPOL1 &= ~u8MaskBit;    // POL1[n]=0. Falling edge.
 751   2          xGPIOPS1 |= u8MaskBit;    // PS1[n]=1. Pull-up.
 752   2        }
 753   1      
 754   1        if(u8WakeupEna)
 755   1        {
 756   2          xGPIOMSK1 |= u8MaskBit;   // MSK1[n]=1. Enable as a wake-up source.
 757   2        }
 758   1        else
 759   1        {
 760   2          xGPIOMSK1 &= ~u8MaskBit;    // MSK1[n]=0. Disable
 761   2        }
 762   1      
 763   1        return RETURN_POWER_SUCCESS;
 764   1      }
 765          
 766          ///////////////////////////////////////////////////////////////////////////////////////////////
 767          /// 
 768          ///   Sets a port of GPIO3(3.x) as the wake-up source.
 769          ///
 770          /// @param  u8Port    : 0~7=Port Number
 771          /// @param  u8WakeupEna : Specifies whether the port is used for wake-up source. 0=Disable, 1=Enable.
 772          /// @param  u8RisingEdge  : Specifies the edge polarity for wake-up. 
 773          ///           \n 0=Wake-up on falling edge. In this case, the internal connection of the port is pull-up. 
 774          ///           \n 1=Wake-up on rising edge. In this case, the internal connection of the port is pull-down.
 775          /// @return UINT8. Status.
 776          /// 
 777          ///////////////////////////////////////////////////////////////////////////////////////////////
 778          UINT8 HAL_PowerdownGpio3WakeupSourceSet(UINT8 u8Port, UINT8 u8WakeupEna, UINT8 u8RisingEdge)
 779          {
 780   1        UINT8 u8MaskBit;
 781   1      
 782   1        if(u8Port > 7)
 783   1        {
 784   2          assert_error(POWER_CODE | RETURN_POWER_INVALID_GPIO_PORT);
 785   2          return RETURN_POWER_INVALID_GPIO_PORT;    
 786   2        }
 787   1      
 788   1        u8MaskBit = (0x01 << u8Port);
 789   1      
 790   1        xGPIOPE3 |= u8MaskBit;      // PE3[n]=1. Input mode.
C51 COMPILER V9.53.0.0   POWER                                                             01/28/2020 11:28:54 PAGE 14  

 791   1        if(u8RisingEdge)
 792   1        {
 793   2          xGPIOPOL3 |= u8MaskBit;   // POL3[n]=1. Rising edge.
 794   2          xGPIOPS3 &= ~u8MaskBit;   // PS3[n]=0. Pull-down.
 795   2        }
 796   1        else
 797   1        {
 798   2          xGPIOPOL3 &= ~u8MaskBit;    // POL3[n]=0. Falling edge.
 799   2          xGPIOPS3 |= u8MaskBit;    // PS3[n]=1. Pull-up.
 800   2        }
 801   1      
 802   1        if(u8WakeupEna)
 803   1        {
 804   2          xGPIOMSK3 |= u8MaskBit;   // MSK3[n]=1. Enable as a wake-up source.
 805   2        }
 806   1        else
 807   1        {
 808   2          xGPIOMSK3 &= ~u8MaskBit;    // MSK3[n]=0. Disable
 809   2        }
 810   1      
 811   1        return RETURN_POWER_SUCCESS;
 812   1      }
 813          #endif  // #ifdef __MG2470_POWER_GPIO_INCLUDE_
 814          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1515    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2      41
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
