A51 MACRO ASSEMBLER  L51_BANK_RP_MG2470                                                   01/28/2020 11:28:51 PAGE     1


MACRO ASSEMBLER A51 V8.02b
OBJECT MODULE PLACED IN .\HEX\L51_BANK_RP_MG2470.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE Platform\asm\L51_BANK_RP_MG2470.a51 SET(LARGE) PRINT(.\LST\L51_BANK_RP_
                      MG2470.lst) OBJECT(.\HEX\L51_BANK_RP_MG2470.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ;============================================================
                       2     ;
                       3     ;       This L51_BANK file is used for code banking of RadioPulse's MG245X
                       4     ;
                       5     ;       NAME    : L51_BANK_RP_MG245X.A51
                       6     ;       Chip            : MG2450/2455
                       7     ;       Vendor  : RadioPulse Inc.
                       8     ;       DATE    : 2008-01-10
                       9     ;
                      10     ;       [2008-01-10] VER 1.60
                      11     ;       - B_NBANKS EQU 2 ==> B_NBANKS EQU 4
                      12     ;
                      13     ;       [2007-11-07] VER 1.50   
                      14     ;       - Initial Version;      
                      15     ;============================================================
                      16     
                      17     
                      18     $nomod51  NOLINES
                      19     $nocond 
                      20     ;------------------------------------------------------------------------------
                      21     ;  This file is part of the BL51 / LX51 Banked Linker/Locater package
                      22     ;  Copyright (c) 1988 - 2001 Keil Elektronik GmbH and Keil Software, Inc.
                      23     ;  Version 2.20 (Code and Variable Banking for Classic 8051 Derivatives)
                      24     ;------------------------------------------------------------------------------
                      25     ;************************ Configuration Section *******************************
  0004                26     ?B_NBANKS       EQU  4    ; Define maximum Number of Banks                    *
                      27     ;                         ; following values are allowed: 2, 4, 8, 16, 32, 64 *
                      28     ;                         ; for BL51 the maximum value for ?B_BANKS is 32     *
                      29     ;                         ; for LX51 the maximum value for ?B_BANKS is 64     *
                      30     ;                                                                             *
  0004                31     ?B_MODE         EQU  4    ; 0 for Bank-Switching via 8051 Port                *
                      32     ;                         ; 1 for Bank-Switching via XDATA Port               *
                      33     ;                         ; 4 for user-provided bank switch code              *
                      34     ;                                                                             *
  0000                35     ?B_RTX          EQU  0    ; 0 for applications without real-time OS           *
                      36     ;                         ; 1 for applications using the RTX-51 real-time OS  *
                      37     ;                                                                             *
  0000                38     ?B_VAR_BANKING  EQU  0    ; Variable Banking via L51_BANK (far memory support)*
                      39     ;                         ; 0 Variable Banking does not use L51_BANK.A51      *
                      40     ;                         ; 1 Variable Banking uses this L51_BANK.A51 module  *
                      41     ; Notes: ?B_VAR_BANKING uses the 'far' and 'far const' C51 memory types to    *
                      42     ;        extent the space for variables in RAM and/or ROM of classic 8051     *
                      43     ;        device.  The same hardware as for code banking is used.  Program     *
                      44     ;        code banking and variable banking share the same hardware I/O pins.  *
                      45     ;        The C51 Compiler must be used with the VARBANKING directive.         *
                      46     ;        Variable Banking is only supported with the LX51 linker/locater.     *
                      47     ;                                                                             *
  0000                48     ?B_RST_BANK     EQU  0x00 ; specifies the active code bank number after CPU   *
                      49     ;                         ; Reset.  Used to reduce the entries in the         *
                      50     ;                         ; INTERBANK CALL TABLE.  The value 0xFF disables    *
                      51     ;                         ; this LX51 linker/locater optimization.            *
                      52     ; Note:  Interbank Call Table optimization is only possible with LX51.        *
                      53     ;                                                                             *
                      54     ;-----------------------------------------------------------------------------*
                      55     ;                                                                             *
                             ENDIF;                                                                        *
                      67     ;                                                                             *
A51 MACRO ASSEMBLER  L51_BANK_RP_MG2470                                                   01/28/2020 11:28:51 PAGE     2

                             ENDIF;                                                                        *
                      76     ;                                                                             *
                      77     IF  ?B_MODE = 4;                                                              *
                      78     ;-----------------------------------------------------------------------------*
                      79     ; if ?BANK?MODE is 4 define the following switch macros                       *
                      80     ; For bank switching via user-provided bank switch code you must define for   *
                      81     ; each memory bank a own macro which contains the bank switch code.  The      *
                      82     ; following example shows how to use the I/O lines P1.4 and P1.7 for bank     *
                      83     ; switching.  Since you can select just 4 banks with two address lines, just  *
                      84     ; four macros are defined.  The number of macros must conform with the number *
                      85     ; ?B_NBANKS number, i.e. for an application with 16 memory banks you must     *
                      86     ; define 16 macros.                                                           *
                      87     ;                                                                             *
                      88     ; IMPORTANT NOTES:                                                            *
                      89     ; 1. The bank switch logic must be initialized before using it.  Therefore    *
                      90     ;    add the following lines of code at the end of the STARTUP.A51 file:      *
                      91     ;                :                                                            *
                      92     ;      EXTRN CODE (?B_SWITCH0)                                                *
                      93     ;               CALL    ?B_SWITCH0    ; init bank mechanism to code bank 0    *
                      94     ;               LJMP    ?C_START      ; line already exits at the end of file *
                      95     ;                :                                                            *
                      96     ;                                                                             *
                      97     ; 2. If the bank switch macros and the additional control code generate more  *
                      98     ;    than 256 bytes, you need to set the LONG_MACRO flag below.  The error    *
                      99     ;    message "BANK SWITCH CODE BIGGER THAN 256 BYTES, SET LONG_MACRO TO 1"    *
                     100     ;    is generated in case that this is required.                              *
                     101     ;                                                                             *
                     102     ; 3. The only registers that can be modified in this routines without prior   *
                     103     ;    saving are:  DPTR and ACC.                                               *
                     104     ;                                                                             *
                     105     ;                                                                             *
  0000               106     LONG_MACRO      EQU  0    ; 0 default, for normal macros and up to 8 banks    *
                     107     ;                         ; 1 big macro code or many banks                    *
                     108     ;                                                                             *
                     109     ;                                                                             *
  00A1               110     PSBANK          DATA    0A1h
                     111     ;                                                                             *
                     112     SWITCH0         MACRO            ; Switch to Memory Bank #0                   *
                     113                     MOV             PSBANK, #00h
                     114                     NOP             ; by ihsong
                     115                     NOP             ; by ihsong
                     116                     NOP             ; by ihsong
                     117                     NOP             ; by ihsong
                     118     ENDM             ;                                            *
                     119     ;                                                                             *
                     120     SWITCH1         MACRO            ; Switch to Memory Bank #1                   *
                     121                     MOV             PSBANK, #01h
                     122                     NOP             ; by ihsong
                     123                     NOP             ; by ihsong
                     124                     NOP             ; by ihsong
                     125                     NOP             ; by ihsong
                     126     ENDM             ;                                            *
                     127     ;                                                                             *
                     128     SWITCH2         MACRO            ; Switch to Memory Bank #2                   *
                     129                     MOV             PSBANK, #02h
                     130                     NOP             ; by ihsong
                     131                     NOP             ; by ihsong
                     132                     NOP             ; by ihsong
                     133                     NOP             ; by ihsong
                     134     ENDM             ;                                            *
                     135     ;                                                                             *
                     136     SWITCH3         MACRO            ; Switch to Memory Bank #3                   *
                     137                     MOV             PSBANK, #03h
                     138                     NOP             ; by ihsong
                     139                     NOP             ; by ihsong
                     140                     NOP             ; by ihsong
A51 MACRO ASSEMBLER  L51_BANK_RP_MG2470                                                   01/28/2020 11:28:51 PAGE     3

                     141                     NOP             ; by ihsong
                     142     ENDM             ;                                            *
                     143     ;                                                                             *
                     144     ;-----------------------------------------------------------------------------*
                     145     ENDIF;                                                                        *
                     146     ;                                                                             *
                             ENDIF;                                                                        *
                     167     ;                                                                             *
                     168     ;******************************************************************************
                     169     ;                                                                             *
                     170     ; THEORY OF OPERATION                                                         *
                     171     ; -------------------                                                         *
                     172     ; The section below describes the code generated by BL51 or LX51 and the      *
                     173     ; operation of the L51_BANK.A51 module.  BL51/LX51 generates for each         *
                     174     ; function that is located in a code memory bank and called from the common   *
                     175     ; area or a different code bank and entry into the INTRABANK CALL TABLE.  The *
                     176     ; INTRABANK CALL TABLE is located in the SEGMENT ?BANK?SELECT and listed in   *
                     177     ; the Linker MAP file. The entries in that TABLE have the following format:   *
                     178     ;                                                                             *
                     179     ;   ?FCT?1:  MOV  DPTR,#FCT     ; Load Address of target FCT                  *
                     180     ;            JMP  ?B_BANKn      ; Switch to Bank and Jump to Target Code      *
                     181     ;                                                                             *
                     182     ; Instead of directly calling the function FCT, the Linker changes the entry  *
                     183     ; to ?FCT?1.  This entry selects the bank where the function FCT is located   *
                     184     ; and calls that function via the routines defined in this L51_BANK.A51 file. *
                     185     ; The L51_BANK.A51 file contains two sets of functions for each bank:         *
                     186     ;                                                                             *
                     187     ; ?B_BANKn    is a routine which saves the entry of the ?B_SWITCHn function   *
                     188     ;             for the current active bank on the STACK and switches to the    *
                     189     ;             bank 'n'.  Then it jumps to the address specified by the DPTR   *
                     190     ;             register.  It is allowed to modify the following registers in   *
                     191     ;             the ?B_BANKn routine:  A, B, R0, DPTR, PSW                      *
                     192     ;                                                                             *
                     193     ; ?B_SWITCHn  is a function which selects the bank 'n'.  This function is     *
                     194     ;             used at the end of a user function to return to the calling     *
                     195     ;             code bank.  Only the following registers may be altered in the  *
                     196     ;             ?B_SWITCHn function:  R0, DPTR                                  *
                     197     ;                                                                             *
                     198     ; The current active bank is stored in ?B_CURRENTBANK.  RTX-51 uses this      *
                     199     ; variable to restore the code bank after a task switch.  To get correct      *
                     200     ; results, ?B_CURRENTBANK must be set to the code bank before the hardware    *
                     201     ; switch is done, or the code banking sequences must be interrupt protected.  *
                     202     ;******************************************************************************
                     203     
                     204                     NAME    ?BANK?SWITCHING
                     205     
                     206                     PUBLIC  ?B_NBANKS, ?B_MODE, ?B_CURRENTBANK, ?B_MASK
                     207                     PUBLIC  ?B_FACTOR, ?B_RST_BANK
                             ENDIF
                     211     
                     212     ; Standard SFR Symbols required in L51_BANK.A51
  00E0               213     ACC     DATA    0E0H
  00F0               214     B       DATA    0F0H
  0082               215     DPL     DATA    82H
  0083               216     DPH     DATA    83H
  00A8               217     IE      DATA    0A8H
  00AF               218     EA      BIT     IE.7
                     219     
                     220     
                     221     ; generate Mask and Bank Number Information
                             ELSEIF  ?B_NBANKS <= 4
  0003               225       MASK          EQU     00000011B
                             ENDIF     
                     235     
                             ENDIF  ; close block IF ?B_MODE = 0 *******************************************
                     483     
A51 MACRO ASSEMBLER  L51_BANK_RP_MG2470                                                   01/28/2020 11:28:51 PAGE     4

                     484     
                             ENDIF  ; close block IF ?B_MODE = 1 *******************************************
                     726     
                     727     
                     728     IF  ?B_MODE = 4 ;**************************************************************
                     729     
  0000               730     ?B_FACTOR       EQU     0               ; Dummy Declarations
  0000               731     ?B_FIRSTBIT     EQU     0
  0003               732     ?B_MASK         EQU     MASK
                     733     
                     734     ?BANK?SELECT    SEGMENT CODE
                     735     ?BANK?DATA      SEGMENT DATA
----                 736                     RSEG    ?BANK?DATA
0000                 737     ?B_CURRENTBANK: DS      1
                     738     
                     739     BANK            MACRO   N
                     740                     PUBLIC  ?B_BANK&N
                     741     ?B_BANK&N:
                     742                     PUSH    ?B_CURRENTBANK
                     743                     MOV     A,#HIGH ?BANK?SWITCH
                     744                     PUSH    ACC
                     745                     PUSH    DPL
                     746                     PUSH    DPH
                     747                     ENDM
                     748     
                     749     SWITCH          MACRO   N
                     750                     PUBLIC  ?B_SWITCH&N
                     751       IF (LONG_MACRO = 1)
                     752         ?B_SWITCHJ&N:
                     753       ELSE
                     754         ?B_SWITCH&N:
                     755       ENDIF
                     756                     MOV     ?B_CURRENTBANK,#LOW ?B_SWITCH&N
                     757                     SWITCH&N
                     758                     RET
                     759                     ENDM
                     760     
                               ENDIF
                     767     
                     768     ?BANK?SWITCH    SEGMENT CODE PAGE
                     769     
----                 770                     RSEG    ?BANK?SWITCH
  0000               771     B_SWITCH_START  EQU     $
                     772     
                               ENDIF
                     782     
                     783     
                     784     ; Generate ?B_SWITCHn functions
  0000               785     CNT             SET     0
                     786     
                     787                     REPT    ?B_NBANKS
                     788                     BANK    %CNT
                     789                     SWITCH  %CNT
                     790     CNT             SET     CNT+1
                     791                     ENDM
                     792+1                   BANK    %CNT
                     800+1                   SWITCH  %CNT
                     816+1                   BANK    %CNT
                     824+1                   SWITCH  %CNT
                     840+1                   BANK    %CNT
                     848+1                   SWITCH  %CNT
                     864+1                   BANK    %CNT
                     872+1                   SWITCH  %CNT
                     888     
  0054               889     B_SWITCH_SIZE   EQU     $-B_SWITCH_START
                     890     
A51 MACRO ASSEMBLER  L51_BANK_RP_MG2470                                                   01/28/2020 11:28:51 PAGE     5

                               ENDIF
                     894     
                     895     ENDIF  ; close block IF ?B_MODE = 4 *******************************************
                     896     
----                 897                     RSEG    ?BANK?SELECT
                     898     
                     899     ;************************  SWITCHBANK FUNCTION  *******************************
                     900     ;                                                                             *
                     901     ; SWITCHBANK allows use of bank-switching for C programs                      *
                     902     ;                                                                             *
                     903     ; prototype:   extern switchbank (unsigned char bank_number);                 *
                     904     ;                                                                             *
                     905     ;******************************************************************************
                     906                     PUBLIC  _SWITCHBANK, ?B_SWITCHBANK_A
                     907     
0000 EF              908     _SWITCHBANK:    MOV     A,R7
                     909     
                             ENDIF  ; close block IF ?B_MODE = 0 *******************************************
                     926     
                             ENDIF  ; close block IF ?B_MODE = 1 *******************************************
                     942     
                     943     IF  ?B_MODE = 4 ;**************************************************************
                     944     
                             ENDIF
                     952     
0001                 953     ?B_SWITCHBANK_A:
0001 900000   F      954                     MOV     DPTR,#switch_tab
0004 93              955                     MOVC    A,@A+DPTR
0005                 956     ?B_RESTORE_BANK:                       ; entry for RTX-51/XBANKING bank restore
0005 900000   F      957                     MOV     DPTR,#?BANK?SWITCH
0008 73              958                     JMP     @A+DPTR
                     959     
                     960     S_ENTRY         MACRO   N
                     961                     DB      LOW ?B_SWITCH&N
                     962                     ENDM
                     963     
0009                 964     switch_tab:     
  0000               965     CNT             SET     0
                     966     
                     967                     REPT    ?B_NBANKS
                     968                     S_ENTRY %CNT
                     969     CNT             SET     CNT+1
                     970                     ENDM
                     971+1                   S_ENTRY %CNT
                     974+1                   S_ENTRY %CNT
                     977+1                   S_ENTRY %CNT
                     980+1                   S_ENTRY %CNT
                     983     ENDIF  ; close block IF ?B_MODE = 4 *******************************************
                     984     
                     985     
                             ENDIF  ; close block IF ?B_VAR_BANKING ****************************************
                    1398     
A51 MACRO ASSEMBLER  L51_BANK_RP_MG2470                                                   01/28/2020 11:28:51 PAGE     6

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

?BANK?DATA . . . .  D SEG    0001H       REL=UNIT
?BANK?SELECT . . .  C SEG    000DH       REL=UNIT
?BANK?SWITCH . . .  C SEG    0054H       REL=PAGE
?BANK?SWITCHING. .  N NUMB   -----       
?B_BANK0 . . . . .  C ADDR   0000H   R   SEG=?BANK?SWITCH
?B_BANK1 . . . . .  C ADDR   0015H   R   SEG=?BANK?SWITCH
?B_BANK2 . . . . .  C ADDR   002AH   R   SEG=?BANK?SWITCH
?B_BANK3 . . . . .  C ADDR   003FH   R   SEG=?BANK?SWITCH
?B_CURRENTBANK . .  D ADDR   0000H   R   SEG=?BANK?DATA
?B_FACTOR. . . . .  N NUMB   0000H   A   
?B_FIRSTBIT. . . .  N NUMB   0000H   A   
?B_MASK. . . . . .  N NUMB   0003H   A   
?B_MODE. . . . . .  N NUMB   0004H   A   
?B_NBANKS. . . . .  N NUMB   0004H   A   
?B_RESTORE_BANK. .  C ADDR   0005H   R   SEG=?BANK?SELECT
?B_RST_BANK. . . .  N NUMB   0000H   A   
?B_RTX . . . . . .  N NUMB   0000H   A   
?B_SWITCH0 . . . .  C ADDR   000AH   R   SEG=?BANK?SWITCH
?B_SWITCH1 . . . .  C ADDR   001FH   R   SEG=?BANK?SWITCH
?B_SWITCH2 . . . .  C ADDR   0034H   R   SEG=?BANK?SWITCH
?B_SWITCH3 . . . .  C ADDR   0049H   R   SEG=?BANK?SWITCH
?B_SWITCHBANK_A. .  C ADDR   0001H   R   SEG=?BANK?SELECT
?B_VAR_BANKING . .  N NUMB   0000H   A   
ACC. . . . . . . .  D ADDR   00E0H   A   
B. . . . . . . . .  D ADDR   00F0H   A   
B_SWITCH_SIZE. . .  N NUMB   0054H   A   
B_SWITCH_START . .  C ADDR   0000H   R   SEG=?BANK?SWITCH
CNT. . . . . . . .  N NUMB   0004H   A   
DPH. . . . . . . .  D ADDR   0083H   A   
DPL. . . . . . . .  D ADDR   0082H   A   
EA . . . . . . . .  B ADDR   00A8H.7 A   
IE . . . . . . . .  D ADDR   00A8H   A   
LONG_MACRO . . . .  N NUMB   0000H   A   
MASK . . . . . . .  N NUMB   0003H   A   
N. . . . . . . . .    ----   -----       
PSBANK . . . . . .  D ADDR   00A1H   A   
SAVEA. . . . . . .    ----   -----       
SWITCH_TAB . . . .  C ADDR   0009H   R   SEG=?BANK?SELECT
_SWITCHBANK. . . .  C ADDR   0000H   R   SEG=?BANK?SELECT


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
