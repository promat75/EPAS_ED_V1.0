C51 COMPILER V9.53.0.0   SPI                                                               01/28/2020 11:28:54 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE SPI
OBJECT MODULE PLACED IN .\HEX\SPI.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Platform\hal\SPI.c LARGE OPTIMIZE(9,SIZE) BROWSE INCDIR(.\Platform\Inclu
                    -de\;.\Platform\hal\;.\Sample\Include\;.\Sample\Utility\;.\Sample\EVB) DEFINE(__DEBUG,__INTERNAL_MODE) PRINT(.\LST\SPI.ls
                    -t) TABS(2) OBJECT(.\HEX\SPI.obj)

line level    source

   1          
   2          /*******************************************************************************
   3            - Chip    : MG2470B
   4            - Vendor    : RadioPulse Inc, 2012.
   5            - Date    : 2014-01-23
   6            - Version   : V2.2
   7          
   8            [2014-01-23] V2.2
   9            - HAL_SpiIntSet() : enhanced.
  10          
  11            [2013-12-20] V2.1
  12            - HAL_SpiIntSet() : enhanced.
  13            - SYS_SpiMasterPut() : enhanced.
  14            - SYS_SpiMasterPutMultiBytes() : enhanced.
  15            - SYS_SpiSlavePut() : enhanced.
  16            - SYS_SpiSlavePutMultipleBytes() : enhanced.
  17          
  18            [2012-04-25] V2.0
  19            - Initial Version for MG2470B(ChipID=0x71)
  20          *******************************************************************************/
  21          
  22          #include "INCLUDE_MG2470.h"
  23          #include "gpio.h"
  24          #include "spi.h"
  25          
  26          ///////////////////////////////////////////////////////////////////////////////////////////////
  27          /// 
  28          ///   Global variable which indicates whether SPI interrupt is generated.
  29          /// 
  30          ///////////////////////////////////////////////////////////////////////////////////////////////
  31          UINT8 gu8SpiMaster_IntFlag = 0;
  32          
  33          ///////////////////////////////////////////////////////////////////////////////////////////////
  34          /// 
  35          ///   Global variable which indicates the received data for the current SPI cycle in master mode.
  36          /// 
  37          ///////////////////////////////////////////////////////////////////////////////////////////////
  38          UINT8 gu8SpiMaster_RxData;
  39          
  40          ///////////////////////////////////////////////////////////////////////////////////////////////
  41          /// 
  42          ///   Global variable SPI's RX Buffer
  43          /// 
  44          ///////////////////////////////////////////////////////////////////////////////////////////////
  45          UINT8 gau8SpiSlave_RxBuff[SPI_RXBUF_SIZE];
  46          
  47          ///////////////////////////////////////////////////////////////////////////////////////////////
  48          /// 
  49          ///   Global variable which indicates index number for writing SPI's RX Buffer
  50          /// 
  51          ///////////////////////////////////////////////////////////////////////////////////////////////
  52          UINT16  gu16SpiSlave_RxWrIdx = 0;
  53          
C51 COMPILER V9.53.0.0   SPI                                                               01/28/2020 11:28:54 PAGE 2   

  54          ///////////////////////////////////////////////////////////////////////////////////////////////
  55          /// 
  56          ///   Global variable which indicates index number for reading SPI's RX Buffer
  57          /// 
  58          ///////////////////////////////////////////////////////////////////////////////////////////////
  59          UINT16  gu16SpiSlave_RxRdIdx = 0;
  60          
  61          ///////////////////////////////////////////////////////////////////////////////////////////////
  62          /// 
  63          ///   Global variable to be transmitted for next SPI cycle in slave mode.
  64          /// 
  65          ///////////////////////////////////////////////////////////////////////////////////////////////
  66          UINT8 gu8SpiSlave_NextTxData = 0x55;
  67          
  68          ///////////////////////////////////////////////////////////////////////////////////////////////
  69          /// 
  70          ///   Sets clock for SPI.
  71          ///
  72          /// @param  u8On  : 0=Off, 1=On
  73          /// @return void
  74          /// 
  75          ///////////////////////////////////////////////////////////////////////////////////////////////
  76          void HAL_SpiClockOn(UINT8 u8On)
  77          {
  78   1        if(u8On)
  79   1        {
  80   2          SPI_CLK_ON;
  81   2        }
  82   1        else
  83   1        {
  84   2          SPI_CLK_OFF;
  85   2        }
  86   1      }
  87          
  88          ///////////////////////////////////////////////////////////////////////////////////////////////
  89          /// 
  90          ///   Selects a GPIO port as CSn. For example, P3.7 is used as CSn in this function.
  91          ///
  92          /// @param  void
  93          /// @return void
  94          /// @note If other GPIO is used as CSn, it should be set as output port, here.
  95          /// 
  96          ///////////////////////////////////////////////////////////////////////////////////////////////
  97          void HAL_SpiMasterCSnSelect(void)
  98          {
  99   1        // TODO: If other GPIO is used as CSn, it should be set as output port, here.
 100   1        GPIO_CLK_ON;
 101   1        SPI_CSN = 1;      // P3.7
 102   1        HAL_Gpio3InOutSet(7, GPIO_OUTPUT, GPIO_DRIVE_4mA);
 103   1      }
 104          
 105          ///////////////////////////////////////////////////////////////////////////////////////////////
 106          /// 
 107          ///   Selects a GPIO port as CSn. For example, P3.7 is used as CSn in this function.
 108          ///
 109          /// @param  u8High    : 0=low, 1=high.
 110          /// @return void
 111          /// @note If other GPIO is used as CSn, it should be driven as high or low
 112          /// @note refer to HAL_SpiMasterCSnSelect() for the specified CSn port
 113          /// 
 114          ///////////////////////////////////////////////////////////////////////////////////////////////
 115          void HAL_SpiMasterCSnSet(UINT8 u8High)
C51 COMPILER V9.53.0.0   SPI                                                               01/28/2020 11:28:54 PAGE 3   

 116          {
 117   1        // If other GPIO is used as CSn, it should be driven as high or low
 118   1        SPI_CSN = u8High;
 119   1      }
 120          
 121          ///////////////////////////////////////////////////////////////////////////////////////////////
 122          /// 
 123          ///   Sets SPI interrupt.
 124          ///
 125          /// @param  u8IntEna    : 0=Disable, 1=Enable.
 126          /// @param  u8Priority    : Priority of interrupt. 0=Low, 1=High.
 127          /// @param  u8Mode    : Master/Slave mode, Phase, Polarity.
 128          ///           \n  bit[4] : 0=Slave, 1=Master.
 129          ///           \n  bit[3] : Clock polarity(CPOL). SCK's idle state. 0=Low, 1=High.
 130          ///           \n  bit[2] : Clock Phase(CPHA). Bit transition timing. 0=2nd edge, 1=1st edge.
 131          /// @param  u8Speed   : SPI speed.(Refer to [note])
 132          ///           \n  0 = 1 MHz
 133          ///           \n  1 = 500 KHz
 134          ///           \n  2 = 250 KHz
 135          ///           \n  3 = 125 KHz
 136          ///           \n  4 = 62.5 KHz
 137          ///           \n  5 = 31.25 KHz
 138          ///           \n  6 = 15.62 KHz
 139          ///           \n  7 = 7.8 KHz
 140          ///           \n  8 = 3.9 KHz
 141          ///           \n  9 = 1.9 KHz
 142          /// @return UINT8. Status.
 143          /// @note Bit transition timing with CPOL and CPHA.
 144          ///   \n----------------------------------------------
 145          ///   \n        | CPOL=1    | CPOL=0        
 146          ///   \n----------------------------------------------
 147          ///   \n    CPHA=1  | Falling edge  | Rising edge
 148          ///   \n    CPHA=0  | Rising edge | Falling edge
 149          ///   \n----------------------------------------------
 150          /// @note The above SPI speed is valid only when MCU frequency is 8MHz. It is dependent on the MCU frequen
             -cy.
 151          ///     The speed for another frequency is,
 152          ///       \n SPI speed = (Above speed) * (8MHz / MCU frequency)
 153          ///
 154          /// @Example  HAL_SpiIntSet(ENABLE, PRIORITY_HIGH, SPI_MASTER | SPI_POLARITY_HIGH | SPI_PHASE_1ST, SPEED_10
             -00KHz);
 155          ///
 156          ///////////////////////////////////////////////////////////////////////////////////////////////
 157          UINT8 HAL_SpiIntSet(UINT8 u8IntEna, UINT8 u8Priority, UINT8 u8Mode, UINT8 u8Speed)
 158          {
 159   1        UINT8 u8Divisior;
 160   1        UINT8 u8EA;
 161   1        UINT8 ib;
 162   1      
 163   1        if(SPI_CLK_STATE == 0)
 164   1        {
 165   2          assert_error(SPI_CODE | RETURN_SPI_CLOCK_OFF);
 166   2          return RETURN_SPI_CLOCK_OFF;
 167   2        }
 168   1        if(u8Speed > 9)
 169   1        {
 170   2          assert_error(SPI_CODE | RETURN_SPI_INVALID_PARAMETER);
 171   2          return RETURN_SPI_INVALID_PARAMETER;
 172   2        }
 173   1      
 174   1        // Divisor
 175   1        switch(u8Speed)
C51 COMPILER V9.53.0.0   SPI                                                               01/28/2020 11:28:54 PAGE 4   

 176   1        {
 177   2          case  SPI_SPEED_500KHz  : u8Divisior = 0x05;      break;
 178   2          case  SPI_SPEED_250KHz  : u8Divisior = 0x03;      break;
 179   2          case  SPI_SPEED_125KHz  : u8Divisior = 0x04;      break;
 180   2          case  SPI_SPEED_2KHz    : u8Divisior = 0x0B;      break;
 181   2          default           : u8Divisior = u8Speed + 2; break;
 182   2        }
 183   1      
 184   1        xSPCR = 0x00;
 185   1        xSPER = 0x00;
 186   1      
 187   1        xSPCR |= u8Divisior & BIT_1N0 ;
 188   1        xSPER |= (u8Divisior & BIT_3N2) >> 2; 
 189   1        
 190   1        if(u8IntEna)
 191   1        {
 192   2          u8EA = EA;
 193   2          EA = 0;
 194   2          SPIIP = u8Priority;
 195   2          if(u8Mode & BIT4) // Master
 196   2          {
 197   3            HAL_SpiMasterCSnSelect();
 198   3          }
 199   2        
 200   2          xSPCR |= (u8Mode & 0x1C) ;
 201   2          xSPCR |= BIT_7N6;   // bit[7;6] = 2'b11, if bit[6] is 1 from 0, RD/WR pointer is reset
 202   2          SPIIE = 1;
 203   2      
 204   2          if( (u8Mode & BIT4) == 0) // Slave Mode
 205   2          {
 206   3            for(ib=0 ; ib<SPI_HW_FIFO_SIZE ; ib++)
 207   3            {
 208   4              xSPDR = gu8SpiSlave_NextTxData; // Dummy Write
 209   4              DPH = 0;
 210   4            }
 211   3          }
 212   2      
 213   2          EA = u8EA;    
 214   2        }
 215   1        else
 216   1        { 
 217   2          xSPCR = 0x00;
 218   2          SPIIE = 0;
 219   2        }
 220   1      
 221   1        return RETURN_SPI_SUCCESS;
 222   1      }
 223          
 224          ///////////////////////////////////////////////////////////////////////////////////////////////
 225          /// 
 226          ///   Sends 1-byte data from the SPI master device.
 227          ///
 228          /// @param  u8Data  : Data to be sent.
 229          /// @return UINT8. Received data for this SPI cycle.
 230          /// 
 231          ///////////////////////////////////////////////////////////////////////////////////////////////
 232          UINT8 SYS_SpiMasterPut(UINT8 u8Data)
 233          {
 234   1        HAL_SpiMasterCSnSet(0);     // CSn = low
 235   1      
 236   1        EA = 0;
 237   1        xSPDR = u8Data;
C51 COMPILER V9.53.0.0   SPI                                                               01/28/2020 11:28:54 PAGE 5   

 238   1        DPH = 0;
 239   1        EA = 1;
 240   1        while(!gu8SpiMaster_IntFlag);
 241   1        gu8SpiMaster_IntFlag = 0;
 242   1      
 243   1        HAL_SpiMasterCSnSet(1);     // CSn = high
 244   1      
 245   1        return  gu8SpiMaster_RxData;
 246   1      }
 247          
 248          ///////////////////////////////////////////////////////////////////////////////////////////////
 249          /// 
 250          ///   Sends multiple data from the SPI master device.
 251          ///
 252          /// @param  pu8DataBuff : Pointer to the buffer to be sent.
 253          /// @param  u8PutLen    : Number of data to be sent.
 254          /// @return UINT8. Status.
 255          /// 
 256          ///////////////////////////////////////////////////////////////////////////////////////////////
 257          UINT8 SYS_SpiMasterPutMultiBytes(UINT8* pu8DataBuff, UINT8 u8PutLen)
 258          {
 259   1        UINT8 ib;
 260   1        
 261   1        if(u8PutLen > SPI_HW_FIFO_SIZE)
 262   1        {
 263   2          assert_error(SPI_CODE | RETURN_SPI_INVALID_PARAMETER);
 264   2          return RETURN_SPI_INVALID_PARAMETER;
 265   2        }
 266   1      
 267   1        gu8SpiMaster_IntFlag = 0;
 268   1        HAL_SpiMasterCSnSet(0);   // CSn = low
 269   1      
 270   1        for(ib=0 ; ib<u8PutLen ; ib++)
 271   1        {
 272   2          EA = 0;
 273   2          xSPDR = pu8DataBuff[ib];
 274   2          DPH = 0;
 275   2          EA = 1;
 276   2        }
 277   1        
 278   1        // Wait for completing [u8PutLen] bytes SPI data transfer
 279   1        while(!(u8PutLen == gu8SpiMaster_IntFlag));
 280   1        
 281   1        gu8SpiMaster_IntFlag = 0;
 282   1      
 283   1        HAL_SpiMasterCSnSet(1);   // CSn = high
 284   1      
 285   1        return RETURN_SPI_SUCCESS;
 286   1      }
 287          
 288          ///////////////////////////////////////////////////////////////////////////////////////////////
 289          /// 
 290          ///   Sets 1-byte data to be transmitted for next SPI cycle from the SPI slave device.
 291          ///
 292          /// @param  u8NextSendData  : Data to be set.
 293          /// @return void
 294          /// 
 295          ///////////////////////////////////////////////////////////////////////////////////////////////
 296          void SYS_SpiSlavePut(UINT8 u8NextSendData)
 297          {
 298   1        UINT8 ib;
 299   1      
C51 COMPILER V9.53.0.0   SPI                                                               01/28/2020 11:28:54 PAGE 6   

 300   1        // Clear Write Buffer(xSPDR)
 301   1        xSPCR &= ~BIT6;
 302   1        xSPCR |= BIT6;
 303   1      
 304   1        // Set data to be sent for next SPI cycle from Slave to Master.
 305   1        for(ib=0 ; ib<SPI_HW_FIFO_SIZE ; ib++)
 306   1        {
 307   2          EA = 0;
 308   2          xSPDR = u8NextSendData;
 309   2          DPH = 0;
 310   2          EA = 1;
 311   2        }
 312   1        gu8SpiSlave_NextTxData = u8NextSendData;
 313   1      }
 314          
 315          ///////////////////////////////////////////////////////////////////////////////////////////////
 316          /// 
 317          ///   Sets multiple data to be transmitted for next SPI cycles from the SPI slave device.
 318          ///
 319          /// @param  pu8DataBuff : Pointer to the buffer to be set.
 320          /// @param  u8PutLen    : Number of data to be set.
 321          /// @return UINT8. Status.
 322          /// 
 323          ///////////////////////////////////////////////////////////////////////////////////////////////
 324          UINT8 SYS_SpiSlavePutMultipleBytes(UINT8* pu8DataBuff, UINT8 u8PutLen)
 325          {
 326   1        UINT8 ib;
 327   1      
 328   1        if(u8PutLen > SPI_HW_FIFO_SIZE)
 329   1        {
 330   2          assert_error(SPI_CODE | RETURN_SPI_INVALID_PARAMETER);
 331   2          return RETURN_SPI_INVALID_PARAMETER;
 332   2        }
 333   1      
 334   1        // Clear Write Buffer(xSPDR)
 335   1        xSPCR &= ~BIT6;
 336   1        xSPCR |= BIT6;
 337   1      
 338   1        // Set data to be sent for next SPI cycle from Slave to Master.
 339   1        for(ib=0 ; ib<SPI_HW_FIFO_SIZE ; ib++)
 340   1        {
 341   2          EA = 0;
 342   2          xSPDR = pu8DataBuff[ib];
 343   2          DPH = 0;
 344   2          EA = 1;
 345   2        }
 346   1        gu8SpiSlave_NextTxData = pu8DataBuff[0];
 347   1      
 348   1        return RETURN_SPI_SUCCESS;
 349   1      }
 350          
 351          ///////////////////////////////////////////////////////////////////////////////////////////////
 352          /// 
 353          ///   Gets a received data form SPI RX Buffer.
 354          ///
 355          /// @param  pu8Data : Pointer to the data to be got.
 356          /// @return UINT8. Status. 0=Buffer is empty, 1=Buffer is not empty and data is got.
 357          /// 
 358          ///////////////////////////////////////////////////////////////////////////////////////////////
 359          UINT8 SYS_SpiSlaveGet(UINT8* pu8Data)
 360          {
 361   1        UINT16  u16RxLen;
C51 COMPILER V9.53.0.0   SPI                                                               01/28/2020 11:28:54 PAGE 7   

 362   1        UINT16  u16NextNum;
 363   1      
 364   1        u16RxLen = (gu16SpiSlave_RxWrIdx - gu16SpiSlave_RxRdIdx) & (SPI_RXBUF_SIZE - 1);
 365   1      
 366   1        if(u16RxLen)
 367   1        {
 368   2          *pu8Data = gau8SpiSlave_RxBuff[gu16SpiSlave_RxRdIdx];
 369   2          u16NextNum = (gu16SpiSlave_RxRdIdx + 1) & (SPI_RXBUF_SIZE - 1);
 370   2          gu16SpiSlave_RxRdIdx = u16NextNum;
 371   2          return 1;
 372   2        }
 373   1        else
 374   1        {
 375   2          return 0;
 376   2        }   
 377   1      }
 378          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    538    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     71      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
